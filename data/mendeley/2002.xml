<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Aguirre, Nazareno</author><author>Maibaum, Tom</author></authors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>A Temporal Logic Approach to Component-Based System Specification and Reasoning</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><keywords/><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://A Temporal Logic Approach to Component-Based System Specification and Reasoning.pdf</url></pdf-urls></urls><label>Europe;King's College London;UK;University</label><abstract>We propose a language for component-based system specification and reasoning. This language provides a new coarse-grained unit of modularisation, which, we belive, allows one to better organise a system specification, and which admits the definition of (dynamic) reconfiguration operations. The language is mainly based on temporal logic as a formalism to describe behavior. Temporal logic is used to specify both internal behavior of components and architectural aspects of a system. This provides a uniform framework to reason about systems, allowing one to combine properties of components and architectural properties in a convenient way, even in cases in which the architecture could change over time. Some constructs provided by the language can be used to organise specifications in a heirarchical way, which is more suitable for reasoning. The use of temporal logic provides an expressive language for stating properties. The powerful proof calculus associated with the language allows us to prove properties effectively, taking advantage of the structure of the specification.</abstract></record><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Chen, Shiping</author><author>Liu, Yan</author><author>Gorton, Ian</author></authors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>Performance Prediction of Component-based Applications</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><pages>1-12</pages><keywords/><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://Performance Prediction of COTS Component-based Enterprise Applications.pdf</url></pdf-urls></urls><label>Australia;CSIRO Mathematical and Information Sciences;Institute;Microsoft;North America;Pacific Northwest National Lab;Private Company;USA;University;University of Sydney</label><abstract>One of the major problems in building large-scale enterprise systems is anticipating the performance of the eventual solution before it has been built. The fundamental software engineering problem becomes more difficult when the systems are built on component technology. This paper investigates the feasibility of providing a practical solution to this problem. An empirical approach is proposed to determine the performance characteristics of component-based applications by benchmarking and profiling. Based on observation, a model is constructed to act as a performance predictor for a class of applications based on the specific component technology. The performance model derived from empirical measures is necessary to make the problem tractable and the results relevant. A case study applies the performance model to an application prototype implemented by two component infrastructures: CORBA and J2EE.</abstract></record><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>Parameterised Contracts and Adapter Synthesis</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><keywords/><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://Parameterised Contracts and Adapter Synthesis.ps</url></pdf-urls></urls></record><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></authors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>Anatomy of a Research Project in Predictable Assembly</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><keywords/><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://Anatomy of a research project in predictable assembly.pdf</url></pdf-urls></urls><label>Australia;Carnegie Mellon University;Europe;Institute;Malardalen University;Monash University;North America;Software Engineering Institute;Sweden;USA;University</label></record><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Hallstrom, Jason O</author><author>Pike, Scott M</author><author>Sridhar, Nigamanth</author></authors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>Iterators Reconsidered</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><keywords/><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://Iterators Reconsidered.pdf</url></pdf-urls></urls><label>North America;Ohio State University;USA</label><abstract>Software developers are eager to increase the scale of their software products at a rate proportional to the growth of computing resources. With memory, bandwidth, and com- puting power doubling roughly every eigtheen months, de- velopment approaches that are not based on compositional reasoning techniques can not be used to engineer the sys- tems of tomorrow. The enormous scale of these projects far outstrips our ability to understand them using ad-hoc approaches. Industry best practice recognizes the importance of com- ponent reuse, but the emphasis is weighted heavily on the reuse of component code, often times neglecting the need to reuse the effort that went into understanding the com- ponentâ€™s behavior. That is, any scalable software engineer- ing discipline must provide mechanisms for reusing software components, as well as mechanisms for reusing the reasoning effort required to use those components. This paper examines the Iterator pattern with regard to compositional reasoning. The approach, touted as indus- try best practice, is shown to provide ample opportunity for breaking the principles of encapsulation. These various hazards are briefly described, and several techniques for en- suring safe use of the pattern are explored.</abstract></record><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Inverardi, Paola</author><author>Tivoli, Massimo</author></authors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>Correct and automatic assembly of COTS components : an architectural approach</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><keywords/><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://Correct and automatic assembly of COTS components an architectural approach.pdf</url></pdf-urls></urls><label>Europe;Italy;University;University of L'Aquila</label><abstract>Many software projects are based on the integration of independetly designed software components that are acquired on the market rather than developed within the project itself. This tpye of components is well known as COTS (Commercial-Off-The-Shelf) components. Nowadays component based technologies (COM/DCOM, Sun's JavaBeans, CORBA) provide interoperability and composition mechanisms that cannot solve the COTS component assembling problem in an automatic way. Notably, in the context of component based concurrent systems, the COTS component integration may cause deadlocks or other software anomalies within the system. In this position paper, we present our approach to contribute to the research in components assembly. Our long term, goal is to develop a tool that syntesize the assembling code to glue together a set of COTS components. This glue code must be synthesized in such a way that (a well defined set of) functional properties required for the composed system are automatically guaranteed. We propose an architecutural connector-based approach for the assembly problem. The basic idea is to build applications by assuming a defined architectural style. Then, we compose a system in such a way that it is possible to check whether a why the system presents some software anomalies (e.g. : deadlock, livelock). Based on the analysis results a recovery policy which can avoid the anomalies and obtain a correct assembly can be performed.</abstract></record><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Larsson, Magnus</author><author>Wall, Anders</author><author>NorstrÃ¶m, Christer</author><author>Crnkovic, Ivica</author></authors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>Using Prediction-Enabled Technologies for Embedded Product Line Architectures</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><keywords><keyword>component-based development</keyword><keyword>product-line architectures</keyword><keyword>real-time systems</keyword></keywords><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://Using Prediction Enabled Technologies for Embedded Product Line Architectures.pdf</url></pdf-urls></urls><label>ABB;Europe;Malardalen University;Private Company;Sweden;University</label><abstract>Predicting the behavior of a product before it is built has been a long time struggle, especially for software based systems. For building software systems there are few methods that comply with the engineering methods established from physics where properties of a construction can be determined before the actual assembly of a product. By taking the predictable assembly from certifiable components (PACC) approach our intention is to define methods to predict certain properties. We conclude that product line architectures that build on top of a component technology can be built in a much more controlled way if the component technology is prediction enabled. The aim of this position paper is to investigate how embedded product line architectures can utilize a prediction-enabled component technology to build products with known properties. We present a framework where we can reason about extra-functional properties in a uniformed way. We illustrate our approach by an example including the properties end-to-end deadline and version consistent.</abstract></record><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Liu, Chang</author><author>Richardson, Debra J</author></authors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>Specifying Component Method Properties for Component State Recovery in RAIC</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><keywords><keyword>Component Specification</keyword><keyword>Component-Based Software Engineering</keyword><keyword>Engineering.</keyword></keywords><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://Specifying Component Method Properties for Component State Recovery in RAIC.pdf</url></pdf-urls></urls><label>Irvine;North America;USA;University;University of California</label><abstract>Redundant Arrays of Independent Components (RAIC) is a technology that uses groups of similar or identical distributed components to provide reliable services to applications [7]. RAIC controllers use the just-in-time component testing technique to detect component failures. RAIC also allows components in a redundant array to be added or removed dynamically at run-time. Component state recovery techniques are used to bring replacement components or newly added components up-to-date. Two types of state recovery techniques are used in RAIC: a snapshot-based approach and an invocation-history-based approach. Component method properties are used to optimize invocation-history-based component state recovery. This position paper gives a brief overview of RAIC and discusses the component state recovery techniques used in RAIC. A proof- of-concept example is given to illustrate how a problem occurs in a component is detected and how a replacement component is brought up-to-date automatically to substitute the fail component.</abstract></record><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Mason, Dave</author></authors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>Probabilistic Analysis for Component Reliability Composition</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><keywords/><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://Probabilistic Analysis for Component Reliability Composition.pdf</url></pdf-urls></urls><label>Canada;North America;Ryerson Polytechnic University</label><abstract>On of the desirable properties of predicable assembly is reliability. Given reliability and transformation functions for components, it is possible to accurately compose reliabilities. Currently the transformations are limited in their domain of applicability, but we are working to extend their domain.</abstract></record><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Moreno, Gabriel A</author><author>Hissam, Scott A</author><author>Wallnau, Kurt C</author></authors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>Statistical Models for Empirical Component Properties and Assembly-Level Property Predictions : Toward Standard Labeling</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><keywords><keyword>empirical validation</keyword><keyword>labeling</keyword><keyword>predictable assembly</keyword><keyword>property measurement</keyword><keyword>property theory</keyword></keywords><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://Statistical Models for Empirical Component Properties and Assembly-Level Property Predictions Toward Standard Labeling.pdf</url></pdf-urls></urls><label>Carnegie Mellon University;Institute;North America;Software Engineering Institute;USA;University</label><abstract>One risk inherent in the use of software components has been that the behavior of assemblies of components is discovered only after their integration. The objective of our work is to enable designers to use known (and certified) component properties as parameters to models that can be used to predict assembly-level properties. Our concern in this paper is with empirical component properties and compositional reasoning, rather than formal properties and reasoning. Empirical component properties must be measured; assessing the effectiveness of predictions based on these properties also involves measurement. This, in turn, introduces systematic and random measurement error. As a consequence, statistical models are needed to describe empirical component properties and predictions. In this position paper, we identify the statistical models that we have found useful in our research, and which we believe can form a basis for standard industry labels for component properties and prediction theories.</abstract></record><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Stafford, Judith</author><author>Mcgregor, John D</author></authors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>Issues in Predicting the Reliability of Composed Components</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><issue>May</issue><keywords/><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://Issues in Predicting the Reliability of Composed Components.pdf</url></pdf-urls></urls><label>Clemson University;Institute;North America;Software Engineering Institute;USA;University</label><abstract>Availability is one of the most frequently specified quality attributes for computerized systems and the computation of availability requires knowledge about the reliability of the system. Although much research has been devoted to software system reliability, much work remains to be done in identifying ways to predict reliability of assemblies of components. We are designing an experiment for use as a foundation for creating a reliability prediction-enabled component technology (PECT), which is to be used to produce systems that are predictably reliable by construction; in the course of that work we have recognized the need to evolve combinatorial reliability models for use in computing reliability of assemblies based on the reliabilities of constituent components. In this paper, we describe and discuss aspects of current models that need to be adapted and how they affect the design of our experiment.</abstract></record><record><database name="2002.enl" path="2002.enl">2002.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Vecellio, Gary J</author><author>Thomas, William M</author><author>Sanders, Robert M</author></authors><secondary-authors><author>Crnkovic, Ivica</author><author>Schmidt, Heinz</author><author>Stafford, Judith</author><author>Wallnau, Kurt</author></secondary-authors></contributors><titles><title>Containers for Predictable Behavior of Component-based Software</title><secondary-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</secondary-title></titles><periodical><full-title>Benchmarks for Predictable Assembly 5th ICSE Workshop on Component-Based Software Engineering (CBSE)</full-title></periodical><keywords><keyword>assurance</keyword><keyword>components</keyword><keyword>containers</keyword><keyword>enterprise javabeans</keyword><keyword>frameworks</keyword><keyword>java</keyword><keyword>java 2 enterprise edition</keyword><keyword>security</keyword></keywords><dates><year>2002</year></dates><pub-location>Orlando, Florida</pub-location><urls><pdf-urls><url>internal-pdf://Containers for Predictable Behavior of Component-based Software.pdf</url></pdf-urls></urls><label>MITRE Corporation;North America;Private Company;USA</label><abstract>Component developers have limited knowledge of how their components will be aggregated into applications and they can not control the deployment and execution environment. This makes the development of predictable component-based software a difficult proposition. Adding services to a software container can help remedy this problem. This paper discusses how commercial container technology can be augmented to support more predictable behavior of component compositions. Our approach consists of augmenting an open source Enterprise JavaBeansâ„¢ (EJBâ„¢) container and server with assertion capabilities.We discuss how these new capabilities can be used at load and initialization time to verify that a composition meets some policy constraints and at runtime to verify that the composition is maintaining critical properties.</abstract></record></records></xml>
