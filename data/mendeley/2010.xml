<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Allier, Simon</author><author>Sahraoui, Houari A</author><author>Sadou, Salah</author><author>Vaucher, Stephane</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>Restructuring Object-Oriented Applications into Component-Oriented Applications by Using Consistency with Execution Traces</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>216-231</pages><keywords/><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Allier et al. - 2010 - Restructuring Object-Oriented Applications into Component-Oriented Applications by Using Consistency with Execution Traces.pdf</url></pdf-urls></urls><label>Canada;Europe;France;North America;North Europe;South-Brittany University;Universite de Montreal;University</label><abstract>Software systems should evolve in order to respond to changing client requirements and their evolving environments. But unfortunately, the evolution of legacy applications generates an exorbitant cost. In this paper, we propose an approach to restructure legacy object- oriented applications into component-based applications. Our approach is based on dynamic dependencies between classes to identify potential components. In this way, the composition is dictated by the context of the application to improve its evolvability. We validate our approach through the study of three legacy Java applications.</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Crnkovic, Ivica</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>Introduction</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>127-133</pages><volume>2</volume><issue>4</issue><keywords/><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><electronic-resource-num>10.1002/swf.45</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Crnkovic - 2010 - Component-based software engineering new challenges in software development.pdf</url></pdf-urls></urls></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Delaval, Gwenaël</author><author>Rutten, Eric</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>Reactive Model-Based Control of Reconfiguration in the Fractal Component-Based Model</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>93-112</pages><keywords><keyword>adaptive systems</keyword><keyword>components</keyword><keyword>contracts</keyword><keyword>discrete controller synthesis</keyword><keyword>model-based approach</keyword><keyword>reactive programming</keyword><keyword>reconfiguration control</keyword><keyword>resource management</keyword></keywords><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Delaval, Rutten - 2010 - Reactive Model-Based Control of Reconfiguration in the Fractal Component-Based Model.pdf</url></pdf-urls></urls><label>Europe;France;Inria/Lig;Institute</label><abstract>We present a technique for designing reconfiguration controllers in the Fractal component-based framework. We obtain discrete control loops that automatically enforce safety properties on the interactions between components, concerning, e.g., mutual exclusions, forbidden or imposed sequences. We use a reactive programming language, with a new mechanism of behavioural contracts. Its compilation involves discrete controller synthesis, which automatically generates the correct adaptation controllers. We apply our approach to the problem of adaptive ressource management, illustrated by the example of a HTTP server.</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Dietrich, Jens</author><author>Stewart, Lucia</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>Component Contracts in Eclipse - A Case Study</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>150-165</pages><keywords/><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Dietrich, Stewart - 2010 - Component Contracts in Eclipse - A Case Study.pdf</url></pdf-urls></urls><label>Australia;New Zealand;School of Engineering and Advanced Technology Mass;University</label><abstract>We present the results of an experiment investigating com-ponent collaborations in the OSGi/Eclipse componentmodel. The aim of the experiment is to demonstrate the benefits of using a formal contract language. For this purpose, we have associated more than 1000 com- ponent collaborations in OSGi/Eclipse with formal contracts extracted from component metadata and extension point documentation. We dis- cuss several characteristics of these contracts, including contract com-plexity, and verification results obtained with these contracts. To our surprise, there are numerous contract violations. This indicates that the use of a formal contract language can significantly improve the quality of dynamically composed systems</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Eichberg, Michael</author><author>Klose, Karl</author><author>Mitschke, Ralf</author><author>Mezini, Mira</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>Component Composition Using Feature Models</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>200-215</pages><keywords/><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Eichberg et al. - 2010 - Component Composition Using Feature Models.pdf</url></pdf-urls></urls><label>Aarhus University;Denmark;Europe;Germany;Technische Universitat Darmstadt;University</label><abstract>In general, components provide and require services and two components are bound if the first component provides a service required by the second component. However, certain variability in services – w.r.t. how and which functionality is provided or required – cannot be described using standard interface description languages. If this variability is rel- evant when selecting a matching component then human interaction is required to decide which components can be bound. We propose to use feature models for making this variability explicit and (re-)enabling au- tomatic component binding. In our approach, feature models are one part of service specifications. This enables to declaratively specify which service variant is provided by a component. By referring to a service’s variation points, a component that requires a specific service can list the requirements on the desired variant. Using these specifications, a component environment can then determine if a binding of the compo- nents exists that satisfies all requirements. The prototypical environment Columbus demonstrates the feasibility of the approach.</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Filieri, Antonio</author><author>Ghezzi, Carlo</author><author>Grassi, Vincenzo</author><author>Mirandola, Raffaela</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>Reliability Analysis of Component-Based Systems with Multiple Failure Modes</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>1-20</pages><keywords/><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Filieri et al. - 2010 - Reliability Analysis of Component-Based Systems with Multiple Failure Modes.pdf</url></pdf-urls></urls><label>Europe;Italy;Politecnico di Milano;Universita di Roma &quot;Tor Vergata&quot;;University</label><abstract>This paper presents a novel approach to the reliability modeling and analysis of a component-based system that allows dealing with multiple failure modes and studying the error propagation among components. The proposed model permits to specify the components attitude to produce, propagate, transform ormask different failuremodes. These component-level reliability specifications together with informa-tion about systems global structure allow precise estimation of reliability properties by means of analytical closed formulas, probabilistic model checking or simulation methods. To support the rapid identification of components that could heavily affect systems reliability, we also show how our modeling approach easily support the automated estimation of the systemsensitivity to variations in the reliability properties of its com-ponents. The results of this analysis allow system designers and developers to identify critical components where it is worth spending additional improvement efforts</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Gama, Kiev</author><author>Donsez, Didier</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>A Self-healing Component Sandbox for Untrustworthy Third Party Code Execution</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>130-149</pages><keywords><keyword>autonomic</keyword><keyword>components</keyword><keyword>Fault containment</keyword><keyword>sandboxing</keyword><keyword>services</keyword></keywords><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Gama, Donsez - 2010 - A Self-healing Component Sandbox for Untrustworthy Third Party Code Execution.pdf</url></pdf-urls></urls><label>ADELE Team;Europe;France;LIG;University;University of Grenoble</label><abstract>This paper presents an architecture and implementation of a self- healing sandbox for the execution of third party code dynamically loaded which may potentially put in risk application stability. By executing code in a fault contained sandbox, no faults are propagated to the trusted part of the application. The sandbox is monitored by a control loop that is able to predict and avoid known types of faults. If the sandbox crashes or hangs, it can be automatically recovered to normal activity without needing to stop the main application. A comparison between an implementation of the sandbox in a domain-based isolation and operating-system based isolation analyses perform- ance overhead, memory footprint and sandbox reboot time in both approaches. The implementation has been tested in a simulation of an RFID and sensor- based application</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Hosek, Petr</author><author>Pop, Tomas</author><author>Petr, Hnetynka</author><author>Malohlava, Michal</author><author>Bures, Tomas</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>Comparison of Component Frameworks for Real-Time Embedded Systems</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>21-36</pages><keywords/><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Hosek et al. - 2010 - Comparison of Component Frameworks for Real-Time Embedded Systems.pdf</url></pdf-urls></urls><label>Academy of Sciences of the Czech Republic;Czech Republic;Department of Software Engineering Faculty of Math;Europe;Institute;Institute of Computer Science;University</label><abstract>The usage of components brings significant help in development of real-time embedded systems. There have been a number of component frameworks developed for this purpose and some of them have already become well-established in this area. However, although the component frameworks share basic concepts and the general approach, they substantially differ in the range of supported features and maturity. This makes relatively difficult to select the right component framework and thus poses a significant obstacle in adoption of the component-based development for real-time embedded systems. To provide an overview, we present a survey in this paper, which illustrates distinguishing features of selected modern component-based frameworks for real-time embedded systems. The survey identifies features which are important for building systemsfrom componentsin thisarea and compares these frameworks with respect to these features.</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Hummel, Oliver</author><author>Atkinson, Colin</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>Automated Creation and Assessment of Component Adapters with Test Cases</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>166-181</pages><keywords/><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Hummel, Atkinson - 2010 - Automated Creation and Assessment of Component Adapters with Test Cases.pdf</url></pdf-urls></urls><label>Europe;Germany;Software Engineering Group;University;University of Mannheim</label><abstract>The composition of new applications from pre-existing parts has been one of the central notions in software reuse and component-based development for many years. Recent advances with component retrieval technologies and dynamically reconfiguring systems have brought the automated integration of components into systems into the focus of research. Even when a component offers all functionality needed by the using environment there is often a host of “syntactic obstacles” and to date there is no general solution available that can automatically address syntactic mismatches between components and their clients. In this paper we present an approach that automatically creates all syn- tactically feasible adapters for a given component-client constellation and selects the semantically correct one with the help of “ordinary” unit test cases. After explaining how our approach works algorithmically, we demonstrate that our prototype implementation is already able to solve a large fraction of the adaptation challenges previously identified in the literature fully automatically.</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Jenson, Graham</author><author>Dietrich, Jens</author><author>Guesgen, Hans W</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>An Empirical Study of the Component Dependency Resolution Search Space</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>182-199</pages><keywords/><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Jenson, Dietrich, Guesgen - 2010 - An Empirical Study of the Component Dependency Resolution Search Space.pdf</url></pdf-urls></urls><label>Australia;New Zealand;School of Engineering and Advanced Technology Mass;University</label><abstract>Dependency Resolution (DR) uses a component’s explicitly declared requirements and capabilities to calculate systems where all re- quirements are met. DR can lead to large amounts of possible solutions because multiple versions of the same component can be available and different vendors can offer the same functionality. From this set of potential solutions DR should identify and return the optimal solution. Determining the feasibility of many optimisation techniques largely depends on the size and complexity of the DR solution search space. Us- ing two sets of OSGi components collected from the Eclipse project and Spring Enterprise Bundle Repository, we measure the size and examine the complexity of the DR search space. By adding simple constraints based on desirable properties, we show the potentially large search space can be significantly restricted. This restriction could be used to make more complex optimisation algorithms feasible for DR.</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Lau, Kung-kiu</author><author>Ntalamagkas, Ioannis</author><author>Tran, Cuong M</author><author>Rana, Tauseef</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>(Behavioural) Design Patterns as Composition Operators</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>232-251</pages><keywords/><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Lau et al. - 2010 - ( Behavioural ) Design Patterns as Composition Operators.pdf</url></pdf-urls></urls><label>Europe;School of Computer Science;The University of Manchester;United Kingdom;University</label><abstract>Design patterns are typically defined informally, albeit in a standard format, and have to be programmed by the software de- signer into each new application. Thus although patterns support solution reuse, in practice this does not translate into code reuse. In this paper we argue that to achieve code reuse, patterns should be defined and used in the context of software component models. We show how in such a model, behavioural patterns can be defined as composition operators which can be stored in a repository, alongside components, thus enabling code reuse.</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Leger, Marc</author><author>Ledoux, Thomas</author><author>Coupaye, Thierry</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>Reliable Dynamic Reconfigurations in a Reflective Component Model</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>74-92</pages><keywords><keyword>component-based architectures</keyword><keyword>dynamic reconfigurations</keyword><keyword>integrity constraints</keyword><keyword>reliability</keyword><keyword>transactions</keyword></keywords><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Leger, Thomas, Thierry - 2010 - Reliable Dynamic Reconfigurations in a Reflective Component Model.pdf</url></pdf-urls></urls><label>Ascola (EMN-INRIA;Europe;France;Inria;LINA) Ecole des Mines de Nantes;Orange Labs;Private Company;University</label><abstract>Software engineering must cope with a more and more increasing need for evolutivity of software systems in order to make their administration easier. However, evolution and especially dynamic evolution in a system must not be done at the expense of its reliability, that is to say its ability to deliver the expected functionalities. Actually runtime modifications in a given system may lead to inconsistent states and so it can have an impact on its reliability. The aim of this paper is to guarantee reliability of dynamic reconfigurations used to make component-based systems evolve at runtime while preserving their availability. We propose a definition of consistency for configurations and reconfigurations in Fractal component architectures with a model based on integrity constraints like for example structural invariants. Reliability of reconfigurations is ensured thanks to a transactional approach which allows us both to deal with error recovery and to manage distributed and concurrent reconfigurations in Fractal applications</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Li, Yan</author><author>Zhou, Minghui</author><author>You, Chao</author><author>Yang, Guo</author><author>Mei, Hong</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>Enabling on Demand Deployment of Middleware Services in Componentized Middleware</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>113-129</pages><keywords><keyword>component dependency management</keyword><keyword>customizability</keyword><keyword>deployment</keyword><keyword>middleware service</keyword></keywords><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Li et al. - 2010 - Enabling on Demand Deployment of Middleware Services in Componentized Middleware.pdf</url></pdf-urls></urls><label>Asia;China;Institute;Key Laboratory of High Confidence Software Technol;Ministry of Education Software Institute;Peking University;School of Electronics Engineering and Computer Sci;University</label><abstract>With the prevalence of middleware, the amount of middleware services (abbr. services) grows increasingly large. However, an application typically utilizes a small subset of the services. In consequence, middleware is often criticized for deploying all the possible services at bootstrap. This paper advocates an on demand approach of deploying services, which is that the middleware automatically and dynamically deploys a minimal set of services according to applications’ demands, so that low resource consumption, high customizability and short boot time can be obtained. By encapsulating the ser- vice as a set of independent deployable components with clearly specified dependencies, we address the problem of on demand service deployment by dint of managing dependencies among the components at runtime and propose a framework supporting the management of application, middleware components and runtime dependencies. Finally, the framework is implemented in a Java EE middleware to demonstrate its feasibility and effectiveness.</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Loiret, Frederic</author><author>Seinturier, Lionel</author><author>Duchien, Laurence</author><author>Servart, David</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>A Three-Tier Approach for Composition of Real-Time Embedded Software Stacks</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>37-54</pages><keywords/><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Frederic et al. - 2010 - A Three-Tier Approach for Composition of Real-Time Embedded Software Stacks.pdf</url></pdf-urls></urls><label>CEA;Europe;France;INRIA-Lille;Institute;LIST;Laboratory of Model Driven Engineering for Embedde;North Europe;Project ADAM;University</label><abstract>Many component models and frameworks have been proposed to abstract and capture concerns from Real-Time and Embedded application domains, based on high-level component-based approaches. However, these approaches tend to propose their own fixed-set abstrac- tions and ad-hoc runtime platforms, whereas the current trend empha- sizes more flexible solutions, as embedded systems must constantly integrate new functionalities, while preserving performance. In this pa- per, we present a two-fold contribution addressing this statement. First, we propose to express these concerns in a decoupled way from the com- monly accepted structural abstractions inherent to CBSE, and provide a framework to implement them in open and extensible runtime containers. Second, we propose a three-tier approach to composition where applica- tion, containers and the underlying operating system are designed using components. Supporting a homogeneous design space allows applying optimization techniques at these three abstraction layers showing that our approach does not impact on performance. In this paper, we focus our evaluation on concerns specific to the field of real-time audio and music applications.</abstract></record><record><database name="2010.enl" path="2010.enl">2010.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Suryadevara, Jagadish</author><author>Kang, Eun-young</author><author>Seceleanu, Cristina</author><author>Pettersson, Paul</author></authors><secondary-authors><author>Lars Grunske, Ralf Reussner and Frantisek Plasil</author></secondary-authors></contributors><titles><title>Bridging the Semantic Gap between Abstract Models of Embedded Systems</title><secondary-title>Component-Based Software Engineering 13th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 13th International Symposium, CBSE</full-title></periodical><pages>55-73</pages><keywords/><dates><year>2010</year></dates><pub-location>Prague, Czech Republic</pub-location><urls><pdf-urls><url>internal-pdf://Suryadevara et al. - 2010 - Bridging the Semantic Gap between Abstract Models of Embedded Systems.pdf</url></pdf-urls></urls><label>Europe;Malardalen Real-Time Research Centre;Malardalen University;Sweden;University</label><abstract>In the development of embedded software, modeling lan- guages used within or across development phases e.g., requirements, specification, design, etc are based on different paradigms and an approach for relating these is needed. In this paper, we present a formal framework for relating specification and design models of embedded systems. We have chosen UML statemachines as specification models and ProCom component language for design models. While the specification is event-driven, the design is based on time triggering and data flow. To relate these abstractions, through the execution trajectories of corresponding models, formal semantics for both kinds of models and a set of inference rules are defined. The approach is applied on an autonomous truck casestudy.</abstract></record></records></xml>
