<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Angelov, Christo</author><author>Sierszecki, Krzysztof</author><author>Marian, Nicolae</author><author>Ma, Jinpeng</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>A Formal Component Framework for Distributed Embedded Systems</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>206 - 221</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Angelov et al. - 2006 - A Formal Component Framework for Distributed Embedded Systems.pdf</url></pdf-urls></urls><label>Denmark;Europe;Insitute;Mads Clausen Institute for Product Innovation;University;University of Southern Denmark</label><abstract>The widespread use of embedded systems mandates the development of industrial software design methods based on formal models (frameworks) and prefabricated components. This paper presents a formal specification of the COMDES framework, focusing on the main architectural issues and the specific line of reasoning that was followed while developing a hierarchy of executable models describing relevant aspects of system structure and behaviour. The above framework has been used to systematically define a hierarchy of reusable and reconfigurable components - simple and composite function blocks, recon- figurable state machines and function units - implementing the executable mod- els presented in the paper</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Attie, Paul C</author><author>Lorenz, David H</author><author>Portnova, Aleksandra</author><author>Chockler, Hana</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Behavioral Compatibility Without State Explosion : Design and Verification of a Component-Based Elevator Control System</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>33-49</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Attie et al. - 2006 - Behavioral Compatibility Without State Explosion Design and Verification of a Component-Based Elevator Control System.pdf</url></pdf-urls></urls><label>American University of Beirut;Beirut;Boston;Insitute;Lebanon;North America;Northeastern University;USA;University;University of Virginia;WPI</label><abstract>Most methods for designing component-based systems and verifying their compatibility address only the syntactic compatibility of components; no analysis of run-time behavior is made. Those methods that do address run-time behavior suffer from state-explosion:the expo- nential increase of the number of global states, and hence the complexity of the analysis, with the number of components. We present a method for designing component-based systems and verifying their behavioral compatibility and temporal behavior that is not susceptible to state ex- plosion. Our method is mostly automatic, with little manual deduction required, and does not analyze a large system of connected components at once, but instead analyzes components two-at-a-time. This pair-wise approach enables the automatic verification of temporal behavior, us- ing model-checking, in time polynomial in the number and size of all components. Our method checks that behavior of a pair of interacting components conforms to given properties, specified in temporal logic. Interaction of the components is captured in a product of their behav- ioral automata, which are provided as a part of each component’s in- terface. We demonstrate the effectiveness of our method by applying it to the design and verification of a component-based elevator control algorithm.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Barbier, Franck</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>An Enhanced Composition Model for Conversational Enterprise JavaBeans</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>344 - 351</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Barbier - 2006 - An Enhanced Composition Model for Conversational Enterprise JavaBeans.pdf</url></pdf-urls></urls><label>Av. de l’université;Europe;France;PauWare Research Group – Université de Pau;University</label><abstract>When designing applications with Enterprise JavaBeans (EJBs) and more specifically with Stateful Session Beans, a major difficulty (or even an impossibility) is being able to properly transform business models and more precisely UML 2 models, into such component types, while including the expression of their mutual compositions. This contradicts with the spirit of the emerging Model-Driven Architecture (MDA) software engineering paradigm based on the definition of seamless model transformations. In this scope, this paper proposes and describes an appropriate Java library in order to increase the composition power of EJBs. The proposition includes a support for a broadcast communication mode (assimilated to “horizontal composition” in the paper) which is, a priori, incompatible with non reentrance, a key characteristic of EJBs. Besides, “vertical composition” is the counterpart of “horizontal compo- sition”. “Vertical composition” enables the consistent hierarchical combination of composite behaviors and compound behaviors, both being specified and implemented by means of UML 2 State Machine Diagrams</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Bastide, Gautier</author><author>Seriai, Abdelhak</author><author>Oussalah, Mourad</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Adaptation of Monolithic Software Components by Their Transformation into Composite Configurations Based on Refactoring</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>368-375</pages><keywords><keyword>adaptation</keyword><keyword>composite- component</keyword><keyword>refactoring</keyword><keyword>restructuration</keyword><keyword>Software component</keyword></keywords><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Bastide, Seriai, Oussalah - 2006 - Adaptation of Monolithic Software Components by Their Transformation into Composite Configurations Based on Refactoring.pdf</url></pdf-urls></urls><label>Ecole des Mines de Douai;Europe;France;Insitute;Lina;Universite de Nantes;University</label><abstract>We present in this paper an approach aiming at adapting component structures instead of adapting component services. It focuses on transforming a software component from a monolithic configuration to a composite one. Among the motivations of this kind of adaptation, we note its possible application to permit flexible deployment of software components and flexible loading of component service-code according to the available resources (CPU, memory). This adaptation is based on the analysis and the instrumentation of component codes</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Bay, Till G</author><author>Eugster, Patrick</author><author>Oriol, Manuel</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Generic Component Lookup</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>182-197</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Bay, Eugster, Oriol - 2006 - Generic Component Lookup(2).pdf</url></pdf-urls></urls><label>Chair of Software Engineering;Dept. of Computer Science;Europe;Insitute;North America;Purdue University;Swiss Federal Institute of Technology in Zurich;Switzerland;USA;University</label><abstract>The possibilities currently offered to conduct business at an electronic level are immense. Service providers offer access to their attendances through components placed on the Internet; such components can be combined to build applications, which can themselves be used as components by further business units. The final leg of the way to this paradigm has been paved by the advent of service-oriented architectures in general, andWeb Services in particular. With protocols existing for any parties to communicate, the most critical in- gredient to the success of a business idea remains the task of choosing one’s busi- ness partners. At a technical level, this translates to the issue of identifying which components represent the most adequate services to build a final application. While each middleware technology and system proposed in the past has been described with its scheme for “looking up” components, this paper chooses the more difficult approach of trying to distill the fundamentals of component lookup. We propose a generic model of component lookup — applicable to settings as diverse as tagged sets, classic white pages, or even method dispatch — and its implementation. We illustrate our model through various examples of existing lookup schemes. It turns out that in our generic context the common distinction between name-based and type-based lookup becomes rather artificia</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Bondarev, Egor</author><author>Chaudron, Michel</author><author>With, Peter De</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>A Process for Resolving Performance Trade-Offs in Component-Based Architectures</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>254-269</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Bondarev, Chaudron, With - 2006 - A Process for Resolving Performance Trade-Offs in Component-Based Architectures.pdf</url></pdf-urls></urls><label>Eindhoven;Eindhoven University of Technology;Europe;LogicaCMG;Private Company;System Architectures and Networking group 5600 MB;The Netherlands;University</label><abstract>Designing architectures requires the balancing of multiple system quality objectives. In this paper, we present techniques that sup- port the exploration of the quality properties of component-based archi- tectures deployed on multiprocessor platforms. Special attention is paid to real-time properties and efficiency of resource use. The main steps of the process are (1) a simple way of modelling properties of software and hardware components, (2) from the component properties, a model of an execution architecture is composed and analyzed for system-level quality attributes, (3) for the composed system, selected execution scenarios are evaluated, (4) Pareto curves are used for making design trade-offs ex- plicit. The process has been applied to several industrial systems. A Car Radio Navigation system is used to illustrate the method. For this sys- tem, we consider architectural alternatives, show their specification, and present their trade-off with respect to cost, performance and robustness.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Cangussu, Joao W</author><author>Cooper, Kendra C</author><author>Wong, Eric W</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Multi Criteria Selection of Components Using the Analytic Hierarchy Process</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>67-81</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Cangussu, Cooper, Wong - 2006 - Multi Criteria Selection of Components Using the Analytic Hierarchy Process.pdf</url></pdf-urls></urls><label>Department of Computer Science;North America;USA;University;University of Texas at Dallas</label><abstract>The Analytic Hierarchy Process (AHP) has been successfully used in the past for the selection of components, as presented in case stud- ies in the literature. In this paper, an empirical study using AHP to rank components is presented. The components used in the study are for data compression; each implements one of the Arithmetic Encoding (AREC), Huffman coding (HUFF), Burrows-Wheeler Transform (BWT), Fractal Image Encoding (FRAC), and Embedded Zero-Tree Wavelet Encoder (EZW) algorithms. The ranking is a semi-automated approach that is based on using rigorously collected data for the components’ behavior; selection criteria include maximum memory usage, total response time, and security properties (e.g., data integrity). The results provide a clear indication that AHP is appropriate for the task of selecting components when several criteria must be considered. Though the study is limited to select components based on multiple non-functional criteria, the ap- proach can be expanded to include multiple functional criteria.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Cervantes, Humberto</author><author>Charleston-Villalobos, Sonia</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Using a Lightweight Workflow Engine in a Plugin-Based Product Line Architecture</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>198 - 205</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Cervantes, Charleston-Villalobos - 2006 - Using a Lightweight Workflow Engine in a Plugin-Based Product Line Architecture.pdf</url></pdf-urls></urls><label>Mexico;North America;Universidad Autonoma Metropolitana-Iztapalapa (UAM;University</label><abstract>This paper presents a software product line architecture where applications are assembled by installing a set of plugins on a common software base. In this architecture, the software base embeds a lightweight workflow engine that guides the main flow of control and data of the application. This architecture eliminates the problem of scattered flow of data and control and facilitates plugin substitution. This architecture is currently being used to build a biomedical engineering research application on top of the Eclipse platform</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Crnkovic, Ivica</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Introduction</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>127-133</pages><volume>2</volume><issue>4</issue><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><electronic-resource-num>10.1002/swf.45</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Crnkovic - 2006 - Component-based software engineering new challenges in software development.pdf</url></pdf-urls><web-urls><url>http://doi.wiley.com/10.1002/swf.45</url></web-urls></urls></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Garcia, Vinicius Cardoso</author><author>Lucredio, Daniel</author><author>Durao, Frederico Araujo</author><author>Cruz Reis Santos, Eduardo</author><author>Santan de Almeida, Eduardo</author><author>Pontin de Mattos Fortes, Renata</author><author>Romero de Lemos Meira, Silvio</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>From Specification to Experimentation : A Software Component Search Engine Architecture</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>82-97</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Garcia et al. - 2006 - From Specification to Experimentation A Software Component Search Engine Architecture.pdf</url></pdf-urls></urls><label>Brazil;C.E.S.A.R. – Recife Center for Advanced Studies an;Informatics Center – Federal University of Pernamb;Insitute;Institute of Mathematical and Computing Sciences –;South America;University</label><abstract>This paper presents a software component search engine, from the early specification and design steps to two experiments per- formed to evaluate its performance. After the experience gained from the use of this first version, several improvements were introduced. The cur- rent version of the engine combines text mining and facet-based search. The experiments indicated, so far, that using these two techniques to- gether is better than using them separately. From the experience ob- tained in these experiments and in industrial tests, we point out possible improvements and future research directions, which are presented and discussed at the end of the paper</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Geominne, Nico</author><author>De Jans, Gregory</author><author>De Turck, Filip</author><author>Dhoedt, Bart</author><author>Gielen, Frank</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Service Policy Enhancements for the OSGi Service Platform</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>238-253</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Geominne et al. - 2006 - Service Policy Enhancements for the OSGi Service Platform.pdf</url></pdf-urls></urls><label>Belgium;Europe;Ghent University;University</label><abstract>New content and service providers emerge every day. Each player offers new software components or services to support their tech- nology. In these multi-vendor environments there is a genuine need for integration and interoperability. Integration and interoperability is a first step, once this is achieved components can seamlessly use services from different providers, and that is when service policies come into play. A policy mechanism allows fine grained control over the service usage. The OSGi Service Platform allows seamless integration of components and services but lacks a well defined mechanism for dynamic service pol- icy management. Two approaches are presented for enhancing the OSGi Service Platform with policies. The first approach extends the platform while the second one adapts the plug-in components. Finally they are compared and evaluated against multiple requirements; usability, per- formance, transparency and backward compatibility.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Grassi, Vincenzo</author><author>Mirandola, Raffaela</author><author>Sabetta, Antonino</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>A Model Transformation Approach for the Early Performance and Reliability Analysis of Component-Based Systems</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>270 - 284</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Grassi, Mirandola, Sabetta - 2006 - A Model Transformation Approach for the Early Performance and Reliability Analysis of Component-Based Systems.pdf</url></pdf-urls></urls><label>Dipartimento di Elettronica e Informazione Politec;Dipartimento di Informatica;Europe;Italy;Sistemi e Produzione Università di Roma “Tor Verga;University</label><abstract>The adoption of a “high level” perspective in the design of a component-based application, without considering the specific features of some underlying supporting platform, has the advantage of focusing on the relevant architectural aspects and reasoning about them in a platform independent way, omitting unnecessary details that could even not be known at the earliest development stages. On the other hand, many of the details that are typically neglected in this high-level perspective must necessarily be taken into account to obtain a meaningful evaluation of different architectural choices in terms of extra-functional quality attributes, like performance or reliability. Toward the reconciliation of these two contrasting needs, we propose a model-based approach whose goal is to support the derivation of sufficiently detailed prediction models from high level models of component-based systems, focusing on the prediction of performance and reliability. We exploit for this purpose a refinement mechanism based on the use of model transformation techniques</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Grondin, Guillaume</author><author>Bouraqadi, Noury</author><author>Vercouter, Laurent</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>MaDcAr : An Abstract Model for Dynamic and Automatic ( Re- ) Assembling of Component-Based Applications</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>360-367</pages><keywords><keyword>Automatic Assembling</keyword><keyword>Context- Awareness.</keyword><keyword>Dynamic Adaptation</keyword></keywords><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Grondin, Bouraqadi, Vercouter - 2006 - MaDcAr An Abstract Model for Dynamic and Automatic ( Re- ) Assembling of Component-Based Applications.pdf</url></pdf-urls></urls><label>Dept. Ecole des Mines de Saint-Etienne;Dept. GIP;Ecole des Mines de Douai;Europe;Fauriel;France;Ssaint-Etienne;University</label><abstract>Dynamicity is an important requirement for critical soft- ware adaptation where a stop can be dangerous (e.g. for humans or environment) or costly (e.g. power plants or production lines). Adap- tation at run-time is also required in context-aware applications where execution conditions often change. In this paper, we introduce MaD- cAr, an abstract model of dynamic automatic adaptation engines for (re-)assembling component-based software. MaDcAr aims at being a conceptual framework for developing customizable engines reusable in multiple applications and execution contexts. Besides, MaDcAr pro- vides a uniform solution for automating both the construction of appli- cation from scratch and the adaptation of existing component assemblies.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Hamlet, Dick</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Defining “ Predictable Assembly ”</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>320-327</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Hamlet - 2006 - Defining “ Predictable Assembly ”.pdf</url></pdf-urls></urls><label>North America;Portland State University;USA;University</label><abstract>Predictable assembly in component-based software develop- ment intuitively means the ability to predict effectively properties of a system, making essential use of properties of its components. A formal definition is difficult to give, because the idea is a large, vague one. As an outgrowth of an informal workshop, this paper frames a mathematical definition. A somewhat surprising consequence of the formal definition is that assembly is usually predictable, but each particular case requires engineering effort to establish.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Hnětynka, Petr</author><author>Plášil, František</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Dynamic Reconfiguration and Access to Services in Hierarchical Component Models</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>352 - 359</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Hnětynka, Plášil - 2006 - Dynamic Reconfiguration and Access to Services in Hierarchical Component Models.pdf</url></pdf-urls></urls><label>Academy of Sciences of the Czech Republic;Charles University;Czech Republic;Department of Software Engineering;Europe;Faculty of Mathematics and Physics;Institute;Institute of Computer Science;University</label><abstract>This paper addresses the unavoidable problem of dynamic reconfig- uration in component-based system with a hierarchical component model. The presented solution is based on (1) allowing several well defined patterns of dynamic reconfiguration and on (2) introducing a utility which allows using a service provided under interface concept, the SOA paradigm from a component-based system. The paper is based on our experience with non-trivial case studies written for component-based systems SOFA and Fractal</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Jalote, Pankaj</author><author>Munshi, Rajesh</author><author>Probsting, Todd</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Components Have Test Buddies</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>310 - 319</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Jalote, Munshi, Probsting - 2006 - Components Have Test Buddies.pdf</url></pdf-urls></urls><label>Microsoft Corporation One Microsoft Way;North America;Private Company;USA</label><abstract>Most large software systems are architected as component-based sys- tems. In such systems, components are developed and tested separately. As components cooperate for providing services, testing of a component also re- veals defects in other components. In this paper we study the role testing of other components plays in finding defects in a component by analyzing defect data of an earlier version of Windows. Our analysis shows that testing of other components often is the largest source of finding defects in a component. The analysis also shows that though many components reveal defects in a compo- nent, often a small set of components – the Test Buddies – exists whose testing reveals the vast majority of the defects found by testing other components. The Test Buddies of a component are those with a heavy interaction with the com- ponent and represent the high priority customers for testing. The Test Buddy information for a system can be determined by the test data of an earlier release, and then can be used in different ways to improve the testing</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Kadri, Reda</author><author>Merciol, Francois</author><author>Sadou, Salah</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>CBSE in Small and Medium-Sized Enterprise : Experience Report</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>154-165</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Kadri, Merciol, Sadou - 2006 - CBSE in Small and Medium-Sized Enterprise Experience Report.pdf</url></pdf-urls></urls><label>Alkante Company;Europe;France;Private Company;RENNES;United Kingdom;University;Valoria Lab;Yves Coppens Research Center University of South B</label><abstract>Although the CBSE has a great success in software engi- neering, only large scale companies use it through their research and development department. Small and medium size enterprises still have some hesitations that deprives them of the various advantages offered by CBSE. This is mainly due to the economic constraints that large compa- nies don’t have. How can we make thembenefit from this technology? Do they have to develop their own models? Should they obtain a modified version of this technology? What will happen to the code that already exists? What are the costs of such migration? How to proceed? In this paper we present an experiment carried out in using CBSE within the framework of a partnership1 between a small and medium-sized enter- prise and an academic research team.We present the results and the way in which this migration has been performed, by hoping that this would be an answer to the above questions</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Koziolek, Heiko</author><author>Happe, Jens</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>A QoS Driven Development Process Model for Component-Based Software Systems</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>336-343</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Koziolek, Happe - 2006 - A QoS Driven Development Process Model for Component-Based Software Systems.pdf</url></pdf-urls></urls><label>Europe;Germany;Graduate School Trustsoft;University;University of Oldenburg</label><abstract>Non-functional specifications of software components are considered an important asset in constructing dependable systems, since they enable early Quality of Service (QoS) evaluations. Several approaches for the QoS analysis of component-based software architectures have been introduced. However,most of these approaches do not consider the integration into the development process sufficiently. For example, they envision a pure bottom-up development or neglect that system architects do not have complete information for QoS analyses at their disposal.We extent an existing component-based development process model by Cheesman and Daniels to explicitly include early, model-based QoS analyses. Besides the system architect, we describe further involved roles. Exemplary for the performance domain, we analyse what information these roles can provide to construct a performance model of a software architecture</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Lau, K.K.</author><author>Ukis, Vladyslav</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Defining and checking deployment contracts for software components</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>1-16</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><publisher>Springer</publisher><urls><pdf-urls><url>internal-pdf://Lau, Ukis - 2006 - Defining and Checking Deployment Contracts.pdf</url></pdf-urls><web-urls><url>http://www.springerlink.com/index/534681771H66574J.pdf</url></web-urls></urls><label>Europe;School of Computer Science;The University of Manchester;United Kingdom;University</label><abstract>Ideally in the deployment phase, components should be composable, and their composition checked. Current component models fall short of this ideal. Most models do not allow composition in the deployment phase. Moreover, cur- rent models use only deployment descriptors as deployment contracts. These descriptors are not ideal contracts. For one thing, they are only for specific con- tainers, rather than arbitrary execution environments. In any case, they are checked only at runtime, not deployment time. In this paper we present an ap- proach to component deployment which not only defines better deployment con- tracts but also checks them in the deployment phase</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Lau, Kung-kiu</author><author>Taweel, Faris M</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Towards Encapsulating Data in Component-Based Software Systems</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>376-384</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Lau, Taweel - 2006 - Towards Encapsulating Data in Component-Based Software Systems.pdf</url></pdf-urls></urls><label>Europe;School of Computer Science;The University of Manchester;United Kingdom;University</label><abstract>A component-based system consists of components linked by con- nectors. Data can reside in components and/or in external data stores. Operations on data, such as access, update and transfer are carried out during computations performed by components. Typically, in current component models, control, com- putation and data aremixed up in the components, while control and data are both communicated by the connectors. As a result, such systems are tightly coupled, making reasoning difficult. In this paper we propose an approach for encapsulat- ing data by separating it from control and computation.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Lee, Kwangyong</author><author>Kim, Juil</author><author>Lee, Woojin</author><author>Chong, Kiwon</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>A Tool to Generate an Adapter for the Integration of Web Services Interface</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>328 - 335</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Lee et al. - 2006 - A Tool to Generate an Adapter for the Integration of Web Services Interface.pdf</url></pdf-urls></urls><label>Asia;Daejeon;Department of Computing;ETRI;Korea;Private Company;Soongsil University;Ubiquitous Computing Middleware Team;University</label><abstract>As the number of available web services is steadily increasing, many applications are being developed by reusing web services. Accordingly, a tool to generate an adapter which integrates interfaces of several web services is proposed in this paper. The concept of the adapter for the integration of web services interface is described. The purpose of the adapter is to help developers use several web services with little effort for their application development. Then, implementation of the tool to generate an adapter is presented. The archi- tecture of the tool, the process, and the algorithm to generate an adapter are de- scribed. The tool will help developers integrate several web services when they develop applications.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Luders, Frank</author><author>Flemstrom, Daniel</author><author>Wall, Anders</author><author>Crnkovic, Ivica</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>A Prototype Tool for Software Component Services in Embedded Real-Time Systems</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>222-237</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Luders et al. - 2006 - A Prototype Tool for Software Component Services in Embedded Real-Time Systems.pdf</url></pdf-urls></urls><label>ABB;Dept. of Computer Science and Electronics;Europe;Malardalen University;Private Company;Sweden;University;Vasteras</label><abstract>The use of software component models has become popu- lar during the last decade, in particular in the development of software for desktop applications and distributed information systems. However, such models have not been widely used in the domain of embedded real- time systems. There is a considerable amount of research on component models for embedded real-time systems, or even narrower application domains, which focuses on source code components and statically con- figured systems. This paper explores an alternative approach by laying the groundwork for a component model based on binary components and targeting the broader domain of embedded real-time systems. The work is inspired by component models for the desktop and information systems domains in the sense that a basic component model is extended with a set of services for the targeted application domain. A prototype tool for supporting these services is presented and its use illustrated by a control application</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Lumpe, Markus</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>GLoo : A Framework for Modeling and Reasoning About Component-Oriented Language Abstractions</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>17-32</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Lumpe - 2006 - GLoo A Framework for Modeling and Reasoning About Component-Oriented Language Abstractions.pdf</url></pdf-urls></urls><label>Department of Computer Science Iowa State Universi;North America;USA;University</label><abstract>The most important contribution to the success or failure of a soft- ware project comes from the choice of the programming languages being used and their support in the target environment. The choice of a suitable implementation language is not a guarantor for success, but an unsuitable language may result in a long, error-prone, and costly implementation, often resulting in an unstable product. In this paper, we present GLoo, a framework for modeling and reason- ing about open-ended language mechanisms for object- and component-oriented software development. At the heart of GLoo is a small dynamic composition lan- guage that provides abstractions to (i) define and/or import reusable software components, (ii) introduce new compositional language abstractions, and (iii) build executable and reusable component-oriented specifications. To demonstrate its flexibility and extensibility, we then present an encoding of the traits concept as an example of how to add support for a new and readily available language abstraction to the GLoo framework</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Mauran, Philippe</author><author>Pham Thi, Xuan Loc</author><author>Padiou, Gerard</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Supervising Distributed Black Boxes</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>166-181</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Mauran, Pham Thi, Padiou - 2006 - Supervising Distributed Black Boxes.pdf</url></pdf-urls></urls><label>Asia;Can Tho University;College of Information Technology;Europe;France;Insitute;Institut de Recherche en Informatique de Toulouse;University;Vietnam</label><abstract>Software components bring in an interesting alternative to the traditional, centralized, approach to software development. The core idea is indeed to enable the (end) user to build and customize his own ap- plication, by assembling pre-existing (“off the shelf”) components. How- ever, picking predefined, off-the-shelf components raises the question of the suitability of these components to a peculiar use. In this setting, the ability to supervise and adapt components appears to be crucial, in or- der to make the component-oriented approach to software design really effective. Thefactthata componentis and must remain a black box for its clientsmakes a significant difference as regards instrumentation, and thus supervision of components. This paper introduces a supervision service fitted for software components. Themain features of this service are that: – it proposes an instrumentation protocol that keeps the opacity of components, with respect to their implementation, whilst it allows to instrument components independently from their design. – it facilitates the supervision of components by providing a simple coupling between the component’s internal control, and the con- trol provided by the user of the component, based on user-specified criteria.This paper motivates the interest of such a supervision service, outlines its implementation, and illustrates its use</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Pérez, Jennifer</author><author>Ali, Nour</author><author>Carsí, Jose A</author><author>Ramos, Isidro</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Designing Software Architectures with an Aspect-Oriented Architecture Description Language</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>123 - 138</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Pérez et al. - 2006 - Designing Software Architectures with an Aspect-Oriented Architecture Description Language(2).pdf</url></pdf-urls></urls><label>Department of Information Systems and Computation;Europe;Spain;University</label><abstract>A great deal of languages have emerged and have demonstrated the advantages that Aspect-Oriented Programming offers. For this reason, the aspect-oriented approach is being introduced into the early phases (analysis and design) of the software life cycle. In this work, we present an Aspect-Oriented Architecture Description Language (AOADL) to specify software architectures of complex, dynamic and distributed software systems. This AOADL follows the PRISMA approach, which integrates the advantages of Component-Based Software Development (CBSD) and Aspect-Oriented Software Development (AOSD). The PRISMA AOADL combines components and aspects in an elegant and novel way achieving a better management of crosscutting-concerns. In addition, it is independent of the technology, and it has great expressive power in order to facilitate the automatic code generation from its specifications. In this work, we demonstrate how PRISMA AOADL improves the management, maintainability and reusability of software architectures introducing the notion of aspect in its ADL</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Royon, Yvan</author><author>Frenot, Stephane</author><author>Le Mouel, Frederic</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Virtualization of Service Gateways in Multi-provider Environments</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>385-392</pages><keywords><keyword>multi-user</keyword><keyword>service-oriented programming</keyword><keyword>Virtual gateway</keyword></keywords><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Royon, Frenot, Le Mouel - 2006 - Virtualization of Service Gateways in Multi-provider Environments.pdf</url></pdf-urls></urls><label>Europe;France;INRIA Ares - CITI Lab - INSA Lyon;University</label><abstract>Today we see more and more services, such as entertainment or home automation, being brought to connected homes. These services are published and operated by a variety of service providers. Currently, each provider sells his own box, providing both connectivity and a closed service environment. The open service paradigm aims at mixing all ser- vices within the same box, thus opening the service delivery chain for home users. However, open service gateways still lack important mech- anisms. Multiple service providers can access and use the same gateway concurrently.Wemust define what this use is, i.e. wemust define a notion of user. Also, service providers should not interfere with each other on the gateway, except if explicitly required. In other words, we must isolate services from different providers, while still permitting on-demand collab- oration. By combining all thesemechanisms, we are defining amulti-user, multi-service execution environment, which we call a virtualized service gateway. We implement part of these features using OSGi technology</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Seinturier, Lionel</author><author>Pessemier, Nicolas</author><author>Duchien, Laurence</author><author>Coupaye, Thierry</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>A Component Model Engineered with Components and Aspects</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>139-153</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Seinturier et al. - 2006 - A Component Model Engineered with Components and Aspects.pdf</url></pdf-urls></urls><label>Europe;France;France Telecom R&amp;D;INRIA Futurs - LIFL;Private Company;Projet Jacquard/GOAL;University</label><abstract>This paper presents AOKell, a framework for engineering component-based systems. This framework implements the Fractal model, a hierarchical and dynamic component model. The novelty of this paper lies in the presentation of AOKell, an implementation of the Fractal model with aspects. Two dimensions can be isolated with Frac- tal: the functional dimension, which is concerned with the definition of application components, and the control dimension, which is concerned with the technical services (e.g. lifecycle, binding, persistence, etc.) that manage components. The originality of AOKell is, first, to provide an aspect-oriented approach to integrate these two dimensions, and sec- ond, to apply a component-based approach for engineering the control dimension. Hence, AOKell is a reflective component framework where application components are managed by other, so-called, control com- ponents and where aspects glue together application components and control components.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Suvee, Davy</author><author>Fraine, Bruno De</author><author>Vanderperren, Wim</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>A Symmetric and Unified Approach Towards Combining Aspect-Oriented and Component-Based Software Development</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>114-122</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Suvee, Fraine, Vanderperren - 2006 - A Symmetric and Unified Approach Towards Combining Aspect-Oriented and Component-Based Software Development.pdf</url></pdf-urls></urls><label>Belgium;Europe;System and Software Engineering Lab (SSEL) Vrije U;University</label><abstract>In this paper, we propose a novel approach towards inte- grating the ideas behind Aspect-Oriented and Component-Based Soft- ware Development. Our approach aims at achieving a symmetric, unified component architecture that treats aspects and components as uniform entities. To this end, a novel component model is introduced that does not employ specialized aspect constructs for modularizing crosscutting concerns. Instead, an expressive configuration language is provided that allows to describe both regular and aspect-oriented interactions amongst components. This paper presents the ongoing FuseJ research, a first ex- periment for realizing this symmetric and unified aspect/component ar- chitecture.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Tibermacine, Chouki</author><author>Fleurquin, Regis</author><author>Sadou, Salah</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>On-Demand Quality-Oriented Assistance in Component-Based Software Evolution</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>294-309</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Tibermacine, Fleurquin, Sadou - 2006 - On-Demand Quality-Oriented Assistance in Component-Based Software Evolution.pdf</url></pdf-urls></urls><label>Europe;France;University;University of South Brittany;VALORIA</label><abstract>During an architectural evolution of a component-based soft- ware, certain quality attributes may be weakened. This is due to the lack of an explicit definition of the links between these non-functional charac- teristics and the architectural decisions implementing them. In this pa- per, we present a solution that aims at assisting the software maintainer during an evolution activity on his demand. It requires the definition of a documentation during development, organized in the form of bindings between formal descriptions of architectural decisions and their targeted quality attributes. Through an assistance algorithm, the approach uses this documentation in order to notify the maintainer of the possible ef- fects of architectural changes on quality requirements.We also present a prototype tool which automates our proposals. This tool and the over- all approach has been experienced on a real-world software in order to validate them.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Ufimtsev, Alexander</author><author>Kucharenka, Alena</author><author>Murphy, Liam</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Impact of Virtual Memory Managers on Performance of J2EE Applications</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>285-293</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Ufimtsev, Kucharenka, Murphy - 2006 - Impact of Virtual Memory Managers on Performance of J2EE Applications.pdf</url></pdf-urls></urls><label>Europe;Ireland;Performance Engineering Laboratory;School of Computer Science and Informatics Univers;University;University College Dublin</label><abstract>We investigate the impact of Operating System’s Virtual Memory Managers (VMMs) on performance of enterprise applications. By taking various popular branches of the Linux kernel and modifying their VMM settings, one can see the effects it introduces on ECPerf J2EE Benchmark. JBoss application server is used to run ECPerf. Our tests show that even the change of one parameter in VMM can have significant performance impacts. Performance of various kernel branches is compared. Parameter sensitivity and influence of specific settings are presented.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Wang, Shangzhu</author><author>Avrunin, George S</author><author>Clarke, Lori A</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Architectural Building Blocks for Plug-and-Play System Design</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>98-113</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Wang, Avrunin, Clarke - 2006 - Architectural Building Blocks for Plug-and-Play System Design.pdf</url></pdf-urls></urls><label>Department of Computer Science;North America;USA;University;University of Massachusetts</label><abstract>One of the distinguishing features of distributed systems is the importance of the interaction mechanisms that are used to define how the sequential components interact with each other. Given the com- plexity of the behavior that is being described and the large design space of various alternatives, choosing appropriate interaction mechanisms is difficult. In this paper, we propose a component-based specification ap- proach that allows designers to experiment with alternative interaction semantics. Our approach is also integrated with design-time verification to provide feedback about the correctness of the overall system design. In this approach, connectors representing specific interaction semantics are composed from reusable building blocks. Standard communication inter- faces for components are defined to reduce the impact of changing inter- actions on components’ computations. The increased reusability of both components and connectors also allows savings at model-construction time for finite-state verification.</abstract></record><record><database name="2006.enl" path="2006.enl">2006.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Xie, Fei</author><author>Browne, James C</author></authors><secondary-authors><author>Ian Gorton, George T. Heineman, Ivica Crnkovic, Heinz W. Schmidt, Judith A. Stafford, Clemens Szyperski and Kurt Wallnau</author></secondary-authors></contributors><titles><title>Verification of Component-Based Software Application Families</title><secondary-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 9th International Symposium, CBSE 2006</full-title></periodical><pages>50-66</pages><keywords/><dates><year>2006</year></dates><pub-location>Västerås, Sweden</pub-location><urls><pdf-urls><url>internal-pdf://Xie, Browne - 2006 - Verification of Component-Based Software Application Families.pdf</url></pdf-urls></urls><label>Dept. of Computer Science;Dept. of Computer Sciences;North America;Portland State Univ. USA;Univ. of Texas at Austin;University</label><abstract>We present a novel approach which facilitates formal verification of component-based software application families using model checking. This ap- proach enables effective compositional reasoning by facilitating formulation of component properties and their environment assumptions. This approach inte- grates bottom-up component verification and top-down system verification based on the concept of application family architectures (AFA). The core elements of an AFA are architectural styles and reusable components. Reusable components of a family are defined in the context of its architectural styles and their correctness properties are verified in bottom-up component compositions. Top-down system verification utilizes architectural styles to guide decomposition of properties of a system into properties of its components and formulation of assumptions for the component properties. The component properties are reused if already veri- fied; otherwise, they are verified top-down recursively. Architectural style guided property decomposition facilitates reuse of verified component properties. Pre- liminary case studies have shown that our approach achieves order-of-magnitude reduction on verification complexities and realizes major verification reuse.</abstract></record></records></xml>
