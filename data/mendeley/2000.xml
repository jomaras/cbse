<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Atkinson, Colin</author><author>Bayer, Joachim</author><author>Laitenberger, Oliver</author><author>Zettel, Jörg</author></authors></contributors><titles><title>Component-Based Software Engineering : The KobrA Approach</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Atkinson et al. - 2000 - Component-Based Software Engineering The KobrA Approach.pdf</url></pdf-urls></urls><label>Europe;Fraunhofer IESE;Germany;Institute</label><abstract>The software industry is pinning its hopes for future sofware productivity and quality gains on component- based development. However, to date the component paradigm has only really penetrated the &quot;implementation&quot; phase of the software life-cycle, and does not yet play a major role in the earlier analysis and design activities of large software projects. This is evidenced by the fact that in today's technology being a component means being implemented as a JavaBeans, a COM object or a COBRA object [1]. This paper briefly describes a new method for component-based software engineering, known as KobrA, which makes the component concept an integral part of the complete software life cycle. Distinctive features of the method include integrated support for product 1 INTRODUCTION Component-based software engineering lines, comprehensive UML-based component modeling, and a systematic process based on a strict separation of concerns.</abstract></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Bunting, Russ</author></authors></contributors><titles><title>Component Service Providers : An Evolution in Component Management</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords><keyword>component management</keyword><keyword>component service provider</keyword><keyword>web services</keyword></keywords><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Bunting - 2000 - Component Service Providers An Evolution in Component Management.pdf</url></pdf-urls></urls><label>Canada;North America;Objectools.com;Private Company</label></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Burg, William D</author><author>Hawker, Scott Hale</author><author>P, David</author><author>Mcinnis, Kirby</author><author>Parrish, Allen</author><author>Sharpe, Shane</author><author>Woolridge, Richard</author></authors></contributors><titles><title>Exploring a Comprehensive CBD Method : Use of CBD / e in Practice</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><pages>1-7</pages><keywords/><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Burg et al. - 2000 - Exploring a Comprehensive CBD Method Use of CBD e in Practice.pdf</url></pdf-urls></urls><label>Europe;North America;UAB Birmingham;UK;USA;University;University of Alabama</label></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Cernuda del Rio, Agustin</author><author>Labra Gayo, Jose Emilio</author><author>Cueva Lovell, Juan Manuel</author></authors></contributors><titles><title>Itacio: A Component Model for Verifying Software at Construction Time</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords><keyword>component model</keyword><keyword>component specification</keyword><keyword>Components</keyword><keyword>contracts.</keyword><keyword>software verification</keyword></keywords><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Cernuda del Rio, Labra Gayo, Cueva Lovell - 2000 - Itacio A Component Model for Verifying Software at Construction Time(2).pdf</url></pdf-urls></urls><label>Europe;Private Company;Seresco;Spain;University;University of Oviedo</label><abstract>In spite of the continuous improvement of the development processes and methodologies, the generalised construction of reliable software is still to come. Not only because many of the recommended engineering practices are not sufficiently applied, but also for the lack of available techniques to achieve the desired robustness. In many real- world cases, the formal specification and verification techniques developed so far seem too abstract and intimidating to developers. TVUXW`YbaBTdceY In this paper, a component-based approach for improving the reliability of software development is presented. First, the problem and its proposed solution are stated: a discussion is made about the role of components as a potential new way for building correct-by-construction software. A generic component model for this purpose is defined, under the restrictions of conceptual simplicity and real- world potential applicability. This generic model is then instantiated at different abstraction levels related to the development process. The model serves as a means of expressing constraints for the components; a specific component lattice produces a constraint lattice which can be statically evaluated to find mismatches and potential errors.</abstract></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Crnkovic, Ivica</author><author>Larsson, Magnus</author><author>Lüders, Frank</author></authors></contributors><titles><title>State of the Practice : Component-based Software Engineering Course</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords><keyword>cbse</keyword><keyword>cots</keyword><keyword>industrial systems</keyword><keyword>training</keyword></keywords><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Crnkovic, Larsson, Lüders - 2000 - State of the Practice Component-based Software Engineering Course.pdf</url></pdf-urls></urls><label>ABB;Europe;Malardalen University;Private Company;Sweden;University</label><abstract>Component-based development has many potential advantages such as shorter time to market and lower prices. These advantages are especially attractive for customers, who often do not recognize the risks of lower reliability, possible problems with maintenance, etc. Many software companies are forced to use imported components in their products, but are not able to keep the development process under control. Component-based development is still a process with lot of problems, not well defined either from theoretical or practical points of view. The lack of knowledge is probably the biggest problem and the need for component-based software engineering (CBSE) is urgent. This was the motivation to a company and a university to organize a Ph.D. course on CBSE. Both Ph.D. students and practitioners from the industry participated in the course. The aim of the course was to increase the knowledge and understanding of CBSE, and to analyze the needs for software components in different engineering areas. The course consisted of lectures, seminars and student reports on chosen CBSE topics. This paper describes the course, gives an overview of the reports, and discusses the course result.</abstract></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Eriksson, Niklas</author><author>Vaalundi, Ted</author></authors></contributors><titles><title>Applying CBSE theory on corporate resources</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><issue>Cm</issue><keywords><keyword>cbse</keyword><keyword>cm</keyword><keyword>component</keyword><keyword>software reuse</keyword></keywords><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Eriksson, Vaalundi - 2000 - Applying CBSE theory on corporate resources(2).pdf</url></pdf-urls></urls><label>Europe;ISBIT AB;Private Company;Sweden</label><abstract>Currently, there are a lot of articles written on the theoretical side of CBSE, but these theories in general did not reach the state of practice. There are still too many problems to which this paper presents a practical case where CBSE technologies and methods are applied to different assets in a corporation. We discuss how we, as a small consultant company, have chosen to deal with some of the CBSE problems. We feel that the term software- component must be expanded so that we can use it to encapsulate those assets, not just binary software. We will also introduce a “component environment”, a prototype for handling different types of components</abstract></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Gao, Jerry</author></authors></contributors><titles><title>Component Testability and Component Testing Challenges</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords><keyword>component engineering</keyword><keyword>component testing</keyword><keyword>program testability</keyword><keyword>software engineering</keyword><keyword>software testing</keyword></keywords><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Gao - Unknown - Component Testability and Component Testing Challenges(2).pdf</url></pdf-urls></urls><label>North America;San Jose State University;USA;University</label><abstract>Building high quality and reusable software components is very important for component-based software development projects. The testability of software components is one of the important factors determining the quality of components. As the concept of component engineering receives the wide acceptance in the real world, many practitioners begin or plan to begin to use the component engineering approach to develop component-based software. To develop high quality components, they are looking for answers concerning component testing and component testability. What is component testability? How to evaluate and measure? How to build software components which are testable? This paper shares our thoughts and understanding of component testability, and discusses and identifies the challenges and issues concerning to component testability.</abstract></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Gómez-perez, Asunción</author><author>Lozano, Adolfo</author></authors></contributors><titles><title>Impact of Software Components Characteristics above Decision-making Factors</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords><keyword>characteristics</keyword><keyword>factors</keyword><keyword>reuse</keyword><keyword>software components</keyword></keywords><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Gómez-perez, Lozano - 2000 - Impact of Software Components Characteristics above Decision-making Factors(3).pdf</url></pdf-urls></urls><label>Europe;Spain;Universidad Politecnica de Madrid;Universidad de Extremadura;University</label><abstract>During the software project planning phase, software engineers face the dilemma of deciding which of several software components to reuse, all of which meet appropriate requirements. The first thing they have to do in order to decide which is the best suited is to prioritize requirements. If the component is to undergo a process of adaptation for integration into the project, an evaluation has to be made. Software engineers must assess several characteristics and factors to select a component examining its relevant features, which will affect to their decision with different ratio, depending on company make-up or project peculiarities. This paper provides a guide as an aid for making these decisions, describing the relevant characteristics and factors of software components which will influence each decision-making issue.</abstract></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Hall, Pat</author></authors></contributors><titles><title>Educational Case Study – what is the model of an ideal component ? Must it be an object ?</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Hall - 2000 - Educational Case Study – what is the model of an ideal component Must it be an object.pdf</url></pdf-urls></urls><label>Europe;The Open University;UK;University</label></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Hallsteinsen, Svein</author><author>Dragsten, Oyvind</author><author>Johnsen, Magne</author><author>Ofstad, Jan Ove</author></authors></contributors><titles><title>A Component Oriented Domain Architecture for Fish Farming</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Hallsteinsen et al. - 2000 - A Component Oriented Domain Architecture for Fish Farming(2).pdf</url></pdf-urls></urls><label>Europe;Icon Medialab;Norway;Private Company;SINTEF Telecom and Informatics;Superior System</label><abstract>This paper presents experiences with applying the Magma model for component based software engineering for a family of applications supporting fish farming. Øyvind Dragsten Icon Medialab Box 2393 Solli N-0201Oslo, Norway +47 98820387 oyvind.dragsten@iconmedialab.no Jan Ove Ofstad Superior Systems Olav Tryvasons gt. 39-41 N-7011 Trondheim, Norway Jan.Ove.Ofstad@superior.no that support optimal planning, control and documentation of the production process It focuses on lessons learned from the design and evaluation of a common component based architecture as a means to cope with challenges such a rapidly changing requirements and a dynamic technology environment. It concludes that such an architecture is a good match in this case.</abstract></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Hamlet, Dick</author><author>Mason, Dave</author><author>Woit, Denise</author></authors></contributors><titles><title>Theory of system reliability based on components 1</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><pages>1-9</pages><keywords/><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Hamlet, Mason, Woit - 2000 - Theory of system reliability based on components 1(2).pdf</url></pdf-urls></urls><label>Canada;North America;Portland State University;Ryerson Polytechnic University;USA;University</label><abstract>Most software-component research has been directed at functional specification of software components. The other, equally important, side of the coin is component quality. We present a foundational theory of reliability based on components. The theory describes in principle how component developers can make measurements that are later used by system designers to calculate — without implementation and test — system reliability. The theory is a ”microscopic” one that describes in detail how component properties are reflected in systems designed using those components.</abstract></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Matthews, Hubert</author><author>Collins-cope, Mark</author></authors></contributors><titles><title>Components in Financial Systems</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Matthews, Collins-cope - 2000 - Components in Financial Systems(2).pdf</url></pdf-urls></urls><label>Europe;Private Company;Ratio Group;UK</label><abstract>management. The process by which a component-based system may be designed and the implications for team working are also discussed, as are issues of designing components for reuse. The audience for this paper is intended to be designers and analysts in all fields, particularly those involved in component based design or development. The first part of the paper assumes some knowledge of financial systems, particularly the settlement domain, whereas the remainder of the document is more general in nature. UML object models and sequence diagrams are used to illustrate the packaging and decomposition of the design. For the purposes of this paper, we offer the following definition of a component: A component is a collection of collaborating classes exporting a well-defined interface that is distributed in binary form. This definition is adequate to describe most possible examples of components ranging from a single object file through DLLs to COM objects and Enterprise Java Beans. In this paper we shall be examining components developed in a Unix environment that have been implemented in C++ as shared libraries, although the discussion applies equally well to other types of component.</abstract></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Ning, Jim Q</author></authors></contributors><titles><title>A Component-Based Development Case Study</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Ning - 2000 - A Component-Based Development Case Study(2).pdf</url></pdf-urls></urls><label>North America;Private Company;USA</label></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Seacord, Robert C</author></authors></contributors><titles><title>Case Study : Global Combat Support System - Air Force</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords><keyword>components</keyword><keyword>cots</keyword><keyword>legacy systems</keyword><keyword>modernization</keyword></keywords><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Seacord - 2000 - Case Study Global Combat Support System - Air Force.pdf</url></pdf-urls></urls><label>Carnegie Mellon University;Institute;North America;Software Engineering Institute;USA;University</label><abstract>This case study describes the use of components to modernize legacy systems. The Global Combat Support System for the Air Force (GCSS-AF) seeks to modernize base level support systems into integrated systems that are responsive to Air Force needs during war and peace time. GCSS-AF mission areas include: Logistics, Finance, Personnel, Medical, Business Information and Functional Information Systems. The modernization efforts seek to maintain or improve current capabilities and reduce life cycle support costs without degrading current operations.</abstract></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Thomason, Stuart</author><author>Brereton, Pearl</author><author>Linkman, Stephen</author></authors></contributors><titles><title>CLARiFi An Architecture for Component Classification and Brokerage</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords><keyword>broker</keyword><keyword>classification</keyword><keyword>component</keyword><keyword>component-based software engineering</keyword><keyword>visualisation</keyword></keywords><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Thomason, Brereton, Linkman - 2000 - CLARiFi An Architecture for Component Classification and Brokerage(2).pdf</url></pdf-urls></urls><label>Europe;Keele University;UK;University</label><abstract>The European Commission funded CLARiFi project (CLear And Reliable Information For Integration) brings together academic and industrial expertise in the area of component-based software engineering. Its aim is to develop and prototype the techniques needed to produce a commercially viable component broker, based on sound research concepts. This position paper presents an overview of the project, its technical objectives, perceived benefits and lessons learned so far.</abstract></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Vecellio, Gary</author><author>Thomas, William M</author></authors></contributors><titles><title>Issues in the Assurance of Component-Based Software</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Vecellio, Thomas - 1820 - Issues in the Assurance of Component-Based Software(2).pdf</url></pdf-urls></urls><label>MITRE Corporation;North America;USA</label></record><record><database name="2000.enl" path="2000.enl">2000.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Wallnau, Kurt C</author><author>Plakosh, Daniel</author></authors></contributors><titles><title>WaterBeans : A Custom Component Model and Framework</title><secondary-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>Reflection in Practice 3rd International Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>2000</year></dates><pub-location>Limerick, Ireland</pub-location><urls><pdf-urls><url>internal-pdf://Wallnau, Plakosh - 2000 - WaterBeans A Custom Component Model and Framework.pdf</url></pdf-urls></urls><label>Carnegie Mellon University;Institute;North America;Software Engineering Institute;USA;University</label></record></records></xml>
