<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Bai, Xiaoying</author><author>Wang, Yongbo</author><author>Dai, Guilan</author><author>Tsai, Wei-tek</author><author>Chen, Yinong</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>A Framework for Contract-Based Collaborative Verification and Validation of Web Services</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>258-273</pages><keywords><keyword>Contract-Based</keyword><keyword>Verification and Validation</keyword><keyword>Web Services</keyword></keywords><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Bai et al. - 2007 - A Framework for Contract-Based Collaborative Verification and Validation of Web Services.pdf</url></pdf-urls></urls><label>Arizona State University;Asia;China;Computer Science and Engineering Department;Department on Computer Science and Technology;Institute;North America;Research Institute of Information Technology;Tsinghua University;USA;University</label><abstract>A key issue with Web Services (WS) is the verification and validation (V&amp;V) of services to build trust between service providers and service users. This paper proposed a test-broker architecture so that all stakeholder within WS can contribute to improve the testing of the ser- vices. The test broker supports the submission, indexing, and querying of test artifacts such as test cases, defect reports and evaluations. It can also provide the services for the test generation, test coordination, and distributed testing services. The DCV&amp;V (Decentralized, Collaborative, Verification and Validation) framework is proposed with a set of dis- tributed and collaborated test brokers dedicated to different V&amp;V tasks to enable scalable and flexible test collaborations. The paper explores the concept of design-by-contract and applies the principle to DCV&amp;V. It identifies two categories of testing contracts including TSC (Testing Service Contracts) and TCC (Test Collaboration Contracts). It illus- trates the application of TSC with contract-based test generation based on WS OWL-S specification. It elaborates TCC with the analysis of the test artifacts definitions</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Barais, Olivier</author><author>Plouzeau, Noel</author><author>Saudrais, Sebastian</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Integration of Time Issues into Component-Based Applications</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>173-188</pages><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Barais, Plouzeau, Saudrais - 2007 - Integration of Time Issues into Component-Based Applications.pdf</url></pdf-urls></urls><label>Europe;France;IRISA France;Institute;Triskell Project</label><abstract>In this paper we describe a technique for specifying time related properties on traditional software components. We apply the separation of concerns paradigm to allow independent specification of timing and to integrate time- checking specialized tool support into conventional software design processes. We aim at helping the designer to specify time contracts and at simplifying the introduction of time properties in the component behaviour description.We pro- pose to handle timing issues in a separate and specific design activity, in order to provide means of formal computation of time properties for component assem- blies without modifying in depth existing design processes</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Cortellessa, Vittorio</author><author>Grassi, Vincenzo</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>A Modeling Approach to Analyze the Impact of Error Propagation on Reliability of Component-Based Systems</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>140-156</pages><keywords><keyword>component-based systems</keyword><keyword>reliability</keyword><keyword>state-based model</keyword></keywords><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Cortellessa, Grassi - 2007 - A Modeling Approach to Analyze the Impact of Error Propagation on Reliability of Component-Based Systems.pdf</url></pdf-urls></urls><label>Dipartimento di Informatica;Dipartimento di Informatica Sistemi e Produzione;Europe;Italy;Universita’ dell’Aquila;Universita’ di Roma “Torvergata”;University</label><abstract>We present a novel approach to the analysis of the reliability of a component-based system that takes into account an important architectural attribute, namely the error propagation probability. This is the probability that an error, arising somewhere in the system, propagates to other components, possibly up to the system output. As we show in the paper, this attribute may heavily affect decisions on crucial architectural choices. Nonetheless, it is often neglected in modeling the reliability of component-based systems. Our modeling approach provides a useful support to the reliability engineering of component-based sys- tems, since it can be used to drive several significant tasks, such as: (i) placing error detection and recovery mechanisms, (ii) focusing the design, implemen- tation and selection efforts on critical components, (iii) devising cost-effective testing strategies.We illustrate the approach on an ATMexample system.</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Costa, Cristóbal</author><author>Pérez, Jennifer</author><author>Carsí, José Ángel</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Dynamic Adaptation of Aspect-Oriented Components</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>49-65</pages><keywords><keyword>AOSD</keyword><keyword>CBSD</keyword><keyword>component adaptability</keyword><keyword>dynamic evolution</keyword><keyword>reflection</keyword><keyword>runtime adaptation</keyword><keyword>software architectures</keyword></keywords><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Costa, Pérez, Carsí - 2007 - Dynamic Adaptation of Aspect-Oriented Components.pdf</url></pdf-urls></urls><label>Department of Information Systems and Computation;Department of Organization and Information Structu;Europe;Spain;University</label><abstract>Current works address self-adaptability of software architectures to build more autonomous and flexible systems. However, most of these works only perform adaptations at configuration-level: a component is adapted by being replaced with a new one. The state of the replaced component is lost and related components can undergo undesirable changes. This paper presents a generic solution to design components that are capable of supporting runtime adaptation, taking into account that component type changes must be propagated to its instances. The adaptation is performed in a decentralized and autonomous way, in order to cope with the increasing need for building heterogeneous and autonomous systems. As a result, each component type manages its instances and each instance applies autonomously the changes. Moreover, our proposal uses aspect-oriented components to benefit from their reuse and maintenance, and it is based on MOF and Reflection concepts to benefit from the high abstraction level they provide</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Crnkovic, Ivica</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Introduction</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>127-133</pages><volume>2</volume><issue>4</issue><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><electronic-resource-num>10.1002/swf.45</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Crnkovic - 2007 - Component-based software engineering new challenges in software development.pdf</url></pdf-urls></urls></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Dahlgren, Tamara L</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Performance-Driven Interface Contract Enforcement for Scientific Components</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>157-172</pages><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Dahlgren - 2007 - Performance-Driven Interface Contract Enforcement for Scientific Components.pdf</url></pdf-urls></urls><label>Insitute;Lawrence Livermore National Laboratory;North America;USA</label><abstract>Several performance-driven approaches to selectively enforce interface contracts for scientific components are investigated. The goal is to facilitate debugging deployed applications built from plug-and-play components while keeping the cost of enforcement within acceptable overhead limits. This paper describes a study of global enforcement using apriori ex- ecution cost estimates obtained from traces. Thirteen trials are formed from five, single-component programs. Enforcement experiments con- ducted using twenty-three enforcement policies are used to determine thenatureof exercised contracts and theimpactof a varietyof sampling strategies. Performance-driven enforcement appears to be best suited to programs that exercise moderately expensive contracts</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Desnos, Nicolas</author><author>Huchard, Marianne</author><author>Urtado, Christelle</author><author>Vauttier, Sylvain</author><author>Tremblay, Guy</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Automated and Unanticipated Flexible Component Substitution</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>33-48</pages><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Desnos et al. - 2007 - Automated and Unanticipated Flexible Component Substitution.pdf</url></pdf-urls></urls><label>Canada;Departament informatique;Europe;France;Institute;LGI2P - Ecole des Mines d' Ales;LIRMM - UMR 5506 - CNRS and Univ. Montpellier 2;Montreal;Nimes;North America;UQAM;University</label><abstract>In this paper, we present an automatic and flexible approach for software component substitution.When a component is removed from an assembly,most existing approaches perform component-to-component substitution, relying on the fact that such a candidate component is avail- able, which is hardly to happen because the constraints on its interfaces are too strong.When such a component does not exist, it would be more flexible to allow a single component to be replaced by a whole component assembly. We propose such an automatic substitution mechanism which does not need the changes to be anticipated and preserves the quality of the assembly</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Folmer, Eelke</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Component Based Game Development – A Solution to Escalating Costs and Expanding Deadlines ?</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>66-73</pages><keywords><keyword>COTS</keyword><keyword>Game architectures</keyword><keyword>Games</keyword></keywords><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Folmer - 2007 - Component Based Game Development – A Solution to Escalating Costs and Expanding Deadlines.pdf</url></pdf-urls></urls><label>Game Engineering Research Group University of Neva;North America;USA;University</label><abstract>Expanding deadlines and escalating costs have notoriously plagued the game industry. Although the majority of the game development costs are spent on art and animation, significant cost reductions and more importantly reductions in development time can be achieved when developers use off the shelf components rather than develop them from scratch. However, many game developers struggle with component integration and managing the complexity of their architectures. This paper gives an overview of developing games with components, presents a reference architecture that outlines the relevant areas of reuse and signifies some of the problems with developing components unique to the domain of games</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Fornasier, Patric</author><author>Webber, Jim</author><author>Gorton, Ian</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Soya : A Programming Model and Runtime Environment for Component Composition Using SSDL</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>227-241</pages><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Fornasier, Webber, Gorton - 2007 - Soya A Programming Model and Runtime Environment for Component Composition Using SSDL.pdf</url></pdf-urls></urls><label>Australia;Empirical Software Engineering;Europe;Insitute;Institute;National ICT Australia and School of Computer Scie;North America;Pacific Northwest National Lab;ThoughtWorks;USA;United Kingdom;University;University of New South Wales</label><abstract>The SOAP Service Description Language (SSDL) is a SOAP- centric language for describing Web Service contracts. SSDL focuses on message abstraction as the building block for creating service-oriented applications and provides an extensible range of protocol frameworks that can be used to describe and formally model component composition based onWeb Service interactions. Given its novel approach, imple- menting support for SSDL contracts presents interesting challenges to middleware developers. At one end of the spectrum, programming ab- stractions that support message-oriented designs need to be created. At the other end, new functionality and semantics must be added to existing SOAP engines. In this paper we explain how component developers can create message-oriented Web Service interfaces with contemporary tool support (specifically the Windows Communication Foundation) using SSDL. We show how SSDL can be used as an alternative and powerful metadata language natively alongside existing tooling without imposing additional burdens on application developers. Moreover, we describe the design and architecture of the Soya middleware which supports SSDL- based development of Web Services on the WCF platform</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Author index volume 85.</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>1288-90</pages><volume>85</volume><issue>6</issue><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><accession-num>22116955</accession-num><electronic-resource-num>10.1095/biolreprod.85.6.1288</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Unknown - 2007 - Author index volume 85.pdf</url></pdf-urls><web-urls><url>http://www.ncbi.nlm.nih.gov/pubmed/22116955</url></web-urls></urls></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Lau, Kung-kiu</author><author>Ling, Ling</author><author>Elizondo, Perla Velasco</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Towards Composing Software Components in Both Design and Deployment Phases</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>274-282</pages><issue>i</issue><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Lau, Ling, Elizondo - 2007 - Towards Composing Software Components in Both Design and Deployment Phases.pdf</url></pdf-urls></urls><label>Europe;School of Computer Science;The University of Manchester;United Kingdom;University</label><abstract>In component-based software development, the design of components should be carried out separately from the deployment of components, in order to enable composition by independent third-parties. However, current component models are biased towards either the design phase or the deployment phase. In this paper, we argue that ideally component models should include both design and deployment phases, and it should be possible to compose components in both phases. We also demonstrate a preliminary implementation of composition in both phases in a component model we have define</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Lau, Kung-kiu</author><author>Taweel, Faris M</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Data Encapsulation in Software Components</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>1-16</pages><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Lau, Taweel - 2007 - Data Encapsulation in Software Components.pdf</url></pdf-urls></urls><label>Europe;School of Computer Science;The University of Manchester;United Kingdom;University</label><abstract>Data encapsulation is a familiar property in object-oriented programming. It is not only useful for modelling things in the real world, but it also facilitates reuse by enabling the creation of multiple instances of the same class, each with its own identity and private data. For CBSE, this kind of reuse is clearly also one of the key desiderata. However, it must be achieved in conjunction with composition, which is central to CBSE. In this paper we show how data encapsulation can be combined with composition, by extending a component model we have defined previously.</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Lau, Kung-kiu</author><author>Ukis, Vladyslav</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>A Study of Execution Environments for Software Components</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>107-123</pages><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Lau, Ukis - 2007 - A Study of Execution Environments for Software Components.pdf</url></pdf-urls></urls><label>Europe;School of Computer Science;The University of Manchester;United Kingdom;University</label><abstract>Software components are deployed into an execution environment be- fore runtime. The execution environment influences the runtime execution of a component. Therefore, it is important to study existing execution environments for components and learn how they influence components’ runtime execution. In this paper, we undertake such a study. We show that deploying components into different execution environments may incur runtime conflicts, which, however, can be detected before runtime</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Liu, Yan</author><author>Zhu, Liming</author><author>Gorton, Ian</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Performance Assessment for e-Government Services : An Experience Report</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>74-89</pages><keywords><keyword>and J2EE</keyword><keyword>e-Government</keyword><keyword>performance</keyword><keyword>services</keyword></keywords><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Liu, Zhu, Gorton - 2007 - Performance Assessment for e-Government Services An Experience Report.pdf</url></pdf-urls></urls><label>Australia;Insitute;National ICT Australia;North America;Pacific Northwest National Laboratory;USA</label><abstract>The transformation and integration of government services, enabled by the use of new technologies such as application servers and Web services, is fundamental to reduce the cost of government and improving service outcomes to citizens. Many core Government information systems comprise applications running on legacy mainframes, databases and transaction processing monitors. As Governments worldwide provide direct access over the Internet to these legacy applications from the general public, they may be exposed to workloads well above the origin design parameters of these back-end systems. This creates a significant risk of high profile failures for Government agencies whose newly integrated systems become overloaded. In this paper we describe how we conducted a performance assessment of a business-critical, Internet-facing Web services that integrated new and legacy systems from two Australian Government agencies. We leveraged prototype tools from our own research along with known techniques in performance modeling. We were able to clearly demonstrate that the existing hardware and software would be adequate to handle the predicted workload for the next financial year. We were also able to do ‘what-if’ analysis and predict how the system can perform with alternative strategies to scale the system. We conclude by summarizing the lessons learnt, including the importance of architecture visibility, benchmarking data quality, and measurement feasibility due to issues of outsourcing, privacy legislation and cross-agency involvement integrated systems become overloaded. In this paper we describe how we conducted a performance assessment of a business-critical, Internet-facing Web services that integrated new and legacy systems from two Australian Government agencies. We leveraged prototype tools from our own research along with known techniques in performance modeling. We were able to clearly demonstrate that the existing hardware and software would be adequate to handle the predicted workload for the next financial year. We were also able to do ‘what-if’ analysis and predict how the system can perform with alternative strategies to scale the system. We conclude by summarizing the lessons learnt, including the importance of architecture visibility, benchmarking data quality, and measurement feasibility due to issues of outsourcing, privacy legislation</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Mallick, Sudeep</author><author>Subrahmanya, S V</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Capturing Web Services Provider Constraints – An Algorithmic Approach</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>211-226</pages><keywords><keyword>Graph Theory</keyword><keyword>Oriented Computing</keyword><keyword>Quality of Optimization</keyword><keyword>Web services</keyword></keywords><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Mallick, Subrahmanya - 2007 - Capturing Web Services Provider Constraints – An Algorithmic Approach.pdf</url></pdf-urls></urls><label>Asia;E-commerce Research Lab;India;Infosys Technologies Ltd;Insitute</label><abstract>In the SOA paradigm service composition enables creation of business processes and workflows by assembling together simple or composite services in a particular sequence. In such a distributed architecture possibly involving multiple service providers, service provider optimal selection of configurations, where multiple functionalities (comprising a business process) are available as service implementations from an existing pool of services, based on QoS and cost factors assumes critical practical relevance. In this paper, we analyze various complex business simple or composite services from multiple service providers (some possibly working in coalitions) at varying QoS and cost attribute values. We study the service composition constraints resulting in such a context and propose an algorithm to formally capture these special constraints and represent these into simple weighted multi-stage graphs suitable for subsequent application of various optimization techniques cited in the literature</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Muccini, Henry</author><author>Polini, Andrea</author><author>Ricci, Fabiano</author><author>Bertolino, Antonia</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Monitoring Architectural Properties in Dynamic Component-Based Systems</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>124-139</pages><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Muccini et al. - 2007 - Monitoring Architectural Properties in Dynamic Component-Based Systems.pdf</url></pdf-urls></urls><label>Dipartimento di Informatica University of L’Aquila;Europe;Insitute;Istituto di Scienza e Tecnologie dell’Informazione;Italy;University</label><abstract>Modern systems are increasingly required to be capable to evolve at runtime, in particular allowing for the dynamic plugging of newfeatures. It is important that this evolution happens preserving some established properties (which can concern the structure, the interaction patterns, or crucial extra-functional properties, such as reliability or security), and due to dynamicity this needs to be checked at run-time, as the changes occur. In this work we consider evolving component-based systems formed by a kernel architecture to which new components can be plugged in at run-time, and introduce the MOSAICO approach for the run-time monitoring of architectural properties. MOSAICO uses Aspect-oriented technologies for instrumenting and monitoring the system according to selected architectural properties. MOSAICO can handle evolving black-box component systems since it continuously watches the events occurring at the extension points of the kernel architecture. The application of a prototype implementation ofMOSAICO, capable to han- dle interaction pattern properties, is illustrated on the NewsFeeder case study</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Mulugeta, Mesfin</author><author>Schill, Alexander</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>An Approach for QoS Contract Negotiation in Distributed Component-Based Software</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>90-106</pages><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Mulugeta, Schill - 2007 - An Approach for QoS Contract Negotiation in Distributed Component-Based Software.pdf</url></pdf-urls></urls><label>Dresden University of Technology;Europe;Germany;Insitute;Institute for System Architecture;University</label><abstract>QoS contract negotiation enables the selection of appropriate concrete QoS contracts between collaborating components. The negoti- ation is particularly challenging when component’s QoS contracts de- pend on runtime resources or quality attributes to be fixed dynamically. This paper proposes a QoS contract negotiation approach by modeling it as a constraint solving problem. Important to our approach is the classification of the negotiation in multiple phases - coarse-grained and fine-grained, which are concerned with the negotiation of coarse-grained and fine-grained component properties respectively. We present negoti- ation algorithms first in a single-client - single-server scenario and later generalize it to a multiple-clients scenario. The contract negotiation is illustrated using an example from a video streaming scenario</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Padilla, Gerardo</author><author>Montes De Oca, Carlos</author><author>Lemus, Cuauhtemoc</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>An Execution-Level Component Composition Model Based on Component Testing Information</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>203-210</pages><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Padilla, Montes De Oca, Lemus - 2007 - An Execution-Level Component Composition Model Based on Component Testing Information.pdf</url></pdf-urls></urls><label>Callejón Jalisco S/N. Mineral de Valenciana;Insitute;Mexico;North America;Research Center in Mathematics - CIMAT</label><abstract>Software components and software architectures have emerged as a promising paradigm to improve the construction of software systems. Some at- tributes, such as reliability, requires evidences about failures in the system. An approach addressing the software reliability estimation problem is based on considering all execution traces collected during the testing process. An execu- tion trace is a sequence of blocks grouping source code statements. Following this approach, early reliability assessment of component assemblies requires addressing an important issue: a precise composition semantics representing the behavior of the assembled components. This paper describes a composition model for sequential component assemblies which uses as basic units of com- position a set of empirical evidences generated during the component testing process. These units are named as Component Test Records</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Polakovic, Juraj</author><author>Mazare, Sebastien</author><author>Stefani, Jean-bernard</author><author>Pierre-charles, David</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Experience with Safe Dynamic Reconfigurations in Component-Based Embedded Systems</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>242-257</pages><keywords/><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Polakovic et al. - 2007 - Experience with Safe Dynamic Reconfigurations in Component-Based Embedded Systems.pdf</url></pdf-urls></urls><label>EMN/INRIA;Europe;France;FranceTelecom R&amp;D;INRIA Rhône Alpes;Insitute;MAPS/AMS Lab;OBASCO Group;Private Company;SARDES Project</label><abstract>Supporting dynamic reconfiguration is required even in highly constrained embedded systems, to allow software patches and updates, and to allow adaptations to changes in environmental and operating conditions without service interruption. Dynamic reconfiguration, however, is a complex and error prone process. In this paper we report our experience in implementing safe dynamic re- configurations in embedded devices with limited resources. Our approach relies on a component-based framework for building reconfigurable operating systems, and the use of a domain specific language (DSL) for reconfiguratio</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Storm, Tijs Van Der</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Binary Change Set Composition</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>17-32</pages><keywords><keyword>component-based software engineering</keyword><keyword>deployment</keyword><keyword>software configuration management</keyword><keyword>update management</keyword></keywords><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Storm - 2007 - Binary Change Set Composition.pdf</url></pdf-urls></urls><label>Centrum voor Wiskunde en Informatica;Europe;Insitute;The Netherlands</label><abstract>Binary component-based software updates that are lightweight, efficient, safe and generic still remain a challenge. Most ex- isting deployment systems that achieve this goal have to control the com- plete software environment of the user which is a barrier to adoption for both software consumers and producers. Binary change set composition is a technique to deliver incremental, binary updates for component-based software systems in an efficient and non-intrusive way. This way applica- tion updates can be delivered more frequently, with minimal additional overhead for users and without sacrificing the benefits of component- based software development</abstract></record><record><database name="2007.enl" path="2007.enl">2007.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Šerý, Ondřej</author><author>Plášil, František</author></authors><secondary-authors><author>Heinz W. Schmidt, Ivica Crnkovic, George T. Heineman and Judith A. Stafford</author></secondary-authors></contributors><titles><title>Slicing of Component Behavior Specification with Respect to Their Composition</title><secondary-title>Component-Based Software Engineering 10th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 10th International Symposium, CBSE</full-title></periodical><pages>189-202</pages><keywords><keyword>Behavior specification</keyword><keyword>Components-based software engineering</keyword><keyword>Software architecture reuse</keyword></keywords><dates><year>2007</year></dates><pub-location>Medford, MA, USA</pub-location><urls><pdf-urls><url>internal-pdf://Šerý, Plášil - 2007 - Slicing of Component Behavior Specification with Respect to Their Composition.pdf</url></pdf-urls></urls><label>Academy of Sciences of the Czech Republic Institut;Charles University in Prague;Czech Republic;Europe;Faculty of Mathematics and Physics Department of S;Insitute;University</label><abstract>Being an important means of reducing development costs, behavior specification of software components facilitates reuse of a component and even reuse of a component’s architecture (assembly). However, since typically only a part of the components’ functionality is actually used in the new context, a significant part of the behavior specification may be superfluous. As a result, it may be hard to see (and filter out) the actual interplay among the components in their behavior specification. This paper targets the problem in the scope of behavior protocols. It presents a technique for slicing behavior protocols with respect to a given context (composition), designed to remove the unused behavior from a behavior specification. The technique is based on a formal foundation, generic enough to support slicing with respect to a property expressed as a predicate. To demonstrate viability of the proposed approach, a positive experience with behavior specification slicing applied in real-life case study is shared with the reader (along with a short description of a prototype)</abstract></record></records></xml>
