<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Aoyama, Mikio</author></authors></contributors><titles><title>New Age of Software Development : How Component-Based Software Engineering Changes the Way of Software Development ?</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><pages>1-5</pages><keywords><keyword>Componentware</keyword><keyword>Framework</keyword><keyword>Java and Distributed Object</keyword><keyword>Object-Orientation</keyword><keyword>Reuse</keyword></keywords><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://New Age of Software Development How Component-Based Software Engineering Changes the Way of Software Development.pdf</url></pdf-urls></urls><label>Asia;Institute;Japan;Niigata Institute of Technology</label><abstract>The dawn of a new age of software development is coming. Wide spread of the Internet technology and PCs opened up new market of software as well as new architecture of software. However, conventional software development technology could not catch up with the speed. Component-Based Software Engineering (CBSE) is an emerging paradigm of software development. Its goal is composing applications with plug &amp; play software components on the frameworks. CBSE is aiming at realizing long-waited software reuse by changing both software architecture and software process. It may vastly change the way we develop software. However, we still see many problems to solve. Let’s open up discussions, and take a step toward the new age of software development.</abstract></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Bergner, Klaus</author><author>Rausch, Andreas</author><author>Sihling, Marc</author></authors></contributors><titles><title>Componentware – The Big Picture</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><pages>1-3</pages><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Componentware--The Big Picture.pdf</url></pdf-urls></urls><label>Europe;Germany;Technische Universität München;University</label></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Bhatti, Shahzad</author></authors></contributors><titles><title>Management of Component-Based Software Engineering</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Management of Component-Based Software Engineering.doc</url></pdf-urls></urls><label>Hewlett Packard;North America;USA</label></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Brown, Alan W</author></authors></contributors><titles><title>From Component Infrastructure To Component-Based Development</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><pages>1-4</pages><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://From Component Infrastructure to Component-Based Systems.pdf</url></pdf-urls></urls><label>North America;Private Company;Sterling Software;USA</label></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Clarke, Siobhan</author><author>Murphy, John</author></authors></contributors><titles><title>Verifying components under development at the design stage A Tool to support composition of component design models</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Verifying components under development at the design stage A Tool to support composition of component design models.doc</url></pdf-urls></urls><label>Dublin City University;Europe;Ireland;University</label><abstract>Two of the main objectives associated with the development of a business component destined for a component-based environment are that the component provides the business service precisely as stated, and that it provides an interface with which other components can work. Testing these objectives often occurs at the system test phase. We are developing a tool that supports the composition of UML design models, which will allow the verification of the design of a component occur at an earlier stage in the development cycle.</abstract></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Dellarocas, Chrysanthos</author></authors></contributors><titles><title>Toward Exception Handling Infrastructures for Component-Based Software</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords><keyword>Institute</keyword><keyword>MIT</keyword><keyword>North America</keyword><keyword>University</keyword><keyword>USA</keyword></keywords><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Toward Exception Handling Infrastructures for Component-Based Software.pdf</url></pdf-urls></urls></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Elrad, Tzilla</author><author>Bader, Atef</author></authors></contributors><titles><title>The Adaptive Arena : A Concurrent Object-Oriented Model</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://The Adaptive Arean A Concurrent Object Oriented Model.pdf</url></pdf-urls></urls><label>Illinois Institute of Technology;Institute;Lucent;North America;Private Company;USA</label><abstract>Most of the current concurrent object-oriented approaches do not address the issue of separation of concern between synchronization and scheduling controls inside the concurrent objects. This paper presents a concurrent object-oriented model in which a concurrent object, which represents a shared resource abstraction in our model, is decomposed into a hierarchy of abstractions: a shared data abstraction, a synchronization abstraction, and a scheduling abstraction. It will be shown that the separation of concern among the three major components of the concurrent objects avoids many of the conceptual difficulties that arise when integrating concurrency into object-oriented paradigm. Our model provides explicit, declarative, and reusable first class components for synchronization and scheduling controls as it has been the case for data and operations in the sequential object-oriented languages. The notion of scheduling policy inheritance in our model facilitates the process of engineering adaptability in the development of the intelligent reactive/adaptive systems.</abstract></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Filman, Robert E</author></authors></contributors><titles><title>Injecting Management</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Injecting Management.doc</url></pdf-urls></urls><label>Microelectronics and Computer Technology Corporati;North America;Private Company;USA</label></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Han, Jun</author></authors></contributors><titles><title>Characterization of Components</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><volume>193</volume><issue>19</issue><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><accession-num>21764917</accession-num><electronic-resource-num>10.1128/JB.05485-11</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Characterization of Components.htm</url></pdf-urls></urls><label>Australia;Monash University;University</label><abstract>Understanding and codifying the characteristics of components is essential to the effective management and development of component-based software systems. In this paper, we analyse the characterization of objects, review the treatment of components in software architecture description languages, and contemplate an object-oriented characterization of components in view of their use and management.</abstract></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Inoue, Takeshi</author></authors></contributors><titles><title>From Class Libraries to Component based development</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://From Class Libraries to Component based development.doc</url></pdf-urls></urls><label>Asia;Japan;Private Company;Yokogawa Electric Corporation</label></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Koutlis, Manolis</author><author>Kourouniotis, Petros</author><author>Kyrimis, Kriton</author><author>Renieri, Nikolina</author></authors></contributors><titles><title>Inter-component communication as a vehicle towards end-user modeling</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><pages>1-3</pages><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Inter-component communication as a vehicle towards end-user modeling.pdf</url></pdf-urls></urls><label>Computer Technology Institute;Europe;Greece;Institute</label></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Kruchten, Philippe</author></authors></contributors><titles><title>Modeling Component Systems with the Unified Modeling Language</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords><keyword>North America</keyword><keyword>Private Company</keyword><keyword>Rational</keyword><keyword>USA</keyword></keywords><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Modeling Component Systems with the Unified Modeling Language.doc</url></pdf-urls></urls></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Krzanik, Lech</author></authors></contributors><titles><title>Component-savvy SACHER to support software change procurers</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Component-savvy SACHER to support software change procurers.doc</url></pdf-urls></urls><label>CCC Software Professionals;Europe;Finland;Private Company;University;University of Oulu</label></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Long, Fred</author><author>Seacord, Robert C</author></authors></contributors><titles><title>A Comparison of Component Integration between JavaBeans and PCTE</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><pages>1-8</pages><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://A Comparison of Component Integration between JavaBeans and PCTE.pdf</url></pdf-urls></urls><label>Carnegie Mellon University;Europe;Institute;North America;Software Engineering Institute;UK;USA;University;University of Wales</label></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Nada, Nader</author><author>Rine, David C</author></authors></contributors><titles><title>A Validate Software Reuse Reference Model Supporting Component-Based Management</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://A Validate Software Reuse Reference Model Supporting Component-Based Management.doc</url></pdf-urls></urls><label>George Mason University;North America;USA;University</label></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Ninq, Jim Q</author></authors></contributors><titles><title>CBSE Research at Andersen Consulting</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://CBSE Research at Andersen Consulting.doc</url></pdf-urls></urls><label>Andersen Consulting;North America;Private Company;USA</label><abstract>Component-Based Software Engineering or CBSE represents a new development paradigm: assembling soft-ware systems from components. This paper discusses the technology infrastructure necessary to support CBSE. In particular, we present the new techniques produced by the CBSE research project conducted at Andersen Consulting.</abstract></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Port, Dan</author></authors></contributors><titles><title>Unification of Components and Objects Through Abstractions</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Unification of Components and Objects Through Abstractions.rtf</url></pdf-urls></urls><label>Institute;USC Center for Software Engineering</label></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Salatami, Nobuyoshi</author></authors></contributors><titles><title>Evolutional Software Engineering with ARBOC Method</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Evolutional Software Engineering with ARBOC Method.doc</url></pdf-urls></urls><label>Asia;Japan;NTTData Corporation;Private Company</label><abstract>With the current drastic changes in the world, such as the financial Big Bang,it is required the evolutional software that contains mechanisms to adapt to the changes in the environment without much effort and time. This paper discusses the software structure based on the component technology and progressive development process which integrates development with maintenance seamlessly based on a floating and Informal business specification.</abstract></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Sant'Anna, Marcelo</author><author>Sampaio deo Prado Leite, Julio Cesar</author><author>do Prado, Antonio Francisco</author></authors></contributors><titles><title>A Generative Approach to Componentware</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords><keyword>Component-based software construction</keyword><keyword>Draco Paradigm</keyword><keyword>Software Architectures and Transformation Systems</keyword><keyword>Software Evolution</keyword><keyword>Software Generators</keyword></keywords><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://A Generative Approach to Componentware .doc</url></pdf-urls></urls><label>Brasil;Pontifícia Universidade Católica do Rio de Janeiro;South America;Universidade Federal de São Carlos;University</label><abstract>Componentware practice faces several problems to handle the evolutionary aspects of software. We focus on four major problems in the area and propose the use of domain-oriented generic software generators as one possible solution. Motivated by the Draco-PUC project, this proposal defines an agenda for improving the Draco-PUC component model and for making it interoperable with CORBA.</abstract></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Schmidt, R</author><author>Assmann, U</author></authors></contributors><titles><title>Concepts For Developing Component-based Systems</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Concepts for Developing Component-based Systems.pdf</url></pdf-urls></urls><label>Forschungszentrum Informatik;Insitute;Universitat Karlsruhe;University</label></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Tai, Stefan</author></authors></contributors><titles><title>A Connector Model fro Object-Oriented Component Integration</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://A Connector Model fro Object-Oriented Component Integration.htm</url></pdf-urls></urls><label>Europe;Germany;Technical University Berlin;University</label><abstract>In this paper, we present a connector model for software architectural representation of complex component collaborations. Our connector model is based on research in software architecture and object-oriented modeling, and part of a design framework for modeling component-based systems that are built using object integration technologies like the OMG's CORBA. We propose connectors as pattern-like, transferable abstractions of component interconnection and interoperation that can be used to model the abstract architecture of a system. Connectors describe a rationale for introducing individual component features and adaptations, and advance the understanding of the concrete programming architecture of an integrated object system.</abstract></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Uehara, Sanya</author></authors></contributors><titles><title>Component Architecture for Business Application Systems</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Component Architecture for Business Application Systems.doc</url></pdf-urls></urls><label>Asia;Fujitsu Laboratories;Japan;Private Company</label><abstract>In this paper, I analyze the technological trends of component architecture used for business applications. By architecture, I am referring to the software elements and the relationships among them. The two important technical goals are (1) separating business logic from implementation logic and (2) mapping business models for implementation. I also explain the difference between object orientation and component orientation in building business application systems.</abstract></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Urnhu, Rpphufh</author><author>Wkh, Ryhu</author><author>Rerul, D Q G</author><author>Ri, Hsduwphqw</author><author>Dqg, Qirupdwlrq</author><author>Qjlqhhulqj, Ohfwurqlfv</author><author>Xmlkdvkl, Qvwlwxwh R I</author><author>Lplwhg, Qvwlwxwh</author><author>Nrerul, Dpdvlwd</author><author>Mul, W R Dlwhf</author><author>Ms, F R</author><author>Wkh, Wudglqj</author><author>Sdfndjhv, Vriwzduh</author><author>Frpsrqhqwv, D Q G</author><author>Fdq, Orfdwlrqv</author><author>Wkh, S O D</author><author>Wkurxjk, Frpsrqhqw</author><author>He, W K H</author><author>Xqghu, L V</author><author>Lq, Hydoxdwlrq</author><author>Hqhudwlrq, W K H W</author><author>Sursrvhv, Duwlfoh</author><author>Dufklwhfwxuh, D Q</author><author>Dlpv, Zklfk</author><author>Sdfndjh, Vriwzduh</author><author>Ghyhorsphqw, Vriwzduh</author><author>Glvwulexwlrq, D Q G</author><author>Fdoohg, V R</author><author>Hqylurqphqw, Remhfwv</author><author>Frpsrqhqwzduh, D Q G</author><author>Fdq, Vriwzduh</author><author>Glvwulexwhg, E H</author><author>Dssolfdwlrqv, H Lvwlqj</author><author>Wr, G X H</author><author>Xs, Nhhs</author><author>Wkh, Zlwk</author><author>Fkdqjh, Udslg</author><author>Exvlqhvv, R I</author><author>Lq, Folpdwh</author></authors></contributors><titles><title>Software Commerce Broker over the Internet</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><volume>6</volume><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Software Commerce Broker over the Internet.pdf</url></pdf-urls></urls><label>Asia;Institute;Japan;Niigata Institute of Technology;The Japan Research Institute</label><abstract>This article proposes an architecture of SCB (Software Commerce Broker) which aims at trading the software packages and components over the Internet. Component-based software engineering is coming into real development paradigm due to wide spreading of distributed objects environment and componentware. Since software can be distributed over the Internet, a Web-based commerce of software components and packages over the Internet is emerging. To realize Web-based software commerce, we develop a prototype of SCB which collects information on software components worlwide over the Internet and provides a set of electronic catalogues of software components in a semi-formal specification language SCL (Software specification and Comerce Language). Furthermore, SCB provides play mechanism on which customers in remote locations can play the component through the Web. SCB is under evaluation in the NExt Generation Software Engineering Program of Software CALS (Continuous Acquisition and Life-cycle Support) project in Japan.</abstract></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Wang, Guijun</author><author>MacLean, H. Alan</author></authors></contributors><titles><title>Architectural Components and Object-Oriented Implementations</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://Architectural Components and Object-Oriented Implementations.htm</url></pdf-urls></urls><label>North America;Private Company;The Boeing Company;USA</label><abstract>An architectural component has a rich set of elements specifying its boundary, while an object interface definition in an object-oriented implementation has limited capability. These differences give rise to a gap between architectural components and objects in object-oriented implementations. Given the central importance of software architecture in component-based software engineering, bridging this gap becomes a key goal in component software development. In this paper, we describe the gap and its implications for component management. We also outline a framework to bridge the gap. In this framework, inter-component communication is separated from the components and handled by ports and links which deal with infrastructure level middleware and protocols, including CORBA IIOP and Java RMI. We then decribe the prototyping of components based on the framework utilizing JavaBeans with extended JavaBeans introspection features to assist in component assembly.</abstract></record><record><database name="1998.enl" path="1998.enl">1998.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Wu, Xuequn</author></authors></contributors><titles><title>A Component-Based Architecture for Building and Managing Global Information Systems</title><secondary-title>ICSE'98 Workshop on Component-Based Software Engineering</secondary-title></titles><periodical><full-title>ICSE'98 Workshop on Component-Based Software Engineering</full-title></periodical><keywords/><dates><year>1998</year></dates><pub-location>Kyoto, Japan</pub-location><urls><pdf-urls><url>internal-pdf://A Component-Based Architecture for Building and Managing Global Information Systems.doc</url></pdf-urls></urls><label>Deutsche Telekom</label></record></records></xml>
