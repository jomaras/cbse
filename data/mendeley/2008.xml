<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Albani, Antonia</author><author>Overhage, Sven</author><author>Birkmeier, Dominik</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Towards a Systematic Method for Identifying Business Components</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>262-277</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Albani, Overhage, Birkmeier - 2008 - Towards a Systematic Method for Identifying Business Components(2).pdf</url></pdf-urls></urls><label>Business Informatics and Systems Engineering Chair;Component and Service Engineering Group;Delft University of Technology;Europe;Germany;Information Systems Design;The Netherlands;University;University of Augsburg</label><abstract>The identification of business components, which together define a modular systems architecture, is a key task in todays component-based devel- opment approaches for the business domain. This paper describes the Business Component Identification (BCI)method which supports a systematic partitioning of a problem domain into business components. The method allows the designer to state preferences for the partitioning process and uses them as the basis to pro- duce an optimized balance between the business components’ granularity on the one hand and their context dependencies on the other hand. It makes use of busi- ness domain models specified during the definition of system requirements and can be integrated into the early design phase of a component-based development process. The paper also shows how the produced partitioning can easily be re- fined into an architecture specification and thus can be used as a starting point for the technical design of a software system and/or its business components</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Arbab, Farhad</author><author>Meng, Sun</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Synthesis of Connectors from Scenario-Based Interaction Specification</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>114-129</pages><keywords><keyword>Connector</keyword><keyword>Constraint Automata</keyword><keyword>Reo</keyword><keyword>Scenario-based Specification</keyword><keyword>Synthesis</keyword><keyword>UML</keyword></keywords><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Arbab, Meng - 2008 - Towards a Systematic Method for Identifying Business Components.pdf</url></pdf-urls></urls><label>CWI;Europe;Institute;The Netherlands</label><abstract>The idea of synthesizing state-based models from scenario-based interaction specifications has receivedmuch attention in recent years. The synthesis approach not only helps to significantly reduce the effort of system construction, but it also provides a bridge over the gap between requirements and implemen- tation of systems. However, the existing synthesis techniques only focus on gen- erating (global or local) state machines from scenario-based specifications, while the coordination among the behavior alternatives of services/components in the systems is not considered. In this paper we propose a novel synthesis technique, which can be used to generate constraint automata specification for connectors from scenario specifications. Inspired by the way UML2.0 sequence diagrams can be algebraically composed, we define an algebraic framework for building constraint automata by exploiting the algebraic structure of UML sequence dia- grams.</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Both, Andreas</author><author>Zimmermann, Wolf</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Automatic Protocol Conformance Checking of Recursive and Parallel Component-Based Systems</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>81-91</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><publisher>Ieee</publisher><isbn>978-0-7695-3399-5</isbn><electronic-resource-num>10.1109/ECOWS.2008.11</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Both, Zimmermann - 2008 - Automatic Protocol Conformance Checking of Recursive and Parallel Component-Based Systems.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4711652</url></web-urls></urls><label>Europe;Germany;Institute;Institute of Computer Science;University;University of Halle</label><abstract>Today model checking of security or safety properties of component-based systems based on finite protocols has the flaw that either parallel or sequential systems can be checked. Parallel systems can be described often by well known Petri nets, but it is not possible to model recursive behaviour. On the other hand sequential systems based on pushdown automata can capture recursion and recursive callbacks [27], but they do not provide parallel behaviour in general. In this work we show how this gap can be filled if process rewrite systems (introduced by Mayr [16]) are used to capture the behaviour of components. The protocols of the components interfaces specified as finite state machines can be combined to a system equal to a process rewrite system. By calculating the reachability of the fault state range one gets a trace (counterexample) which does not satisfy the properties specified by all protocols of the combined components, if any error exists</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Brada, Premek</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>The CoSi Component Model : Reviving the Black-Box Nature of Components</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>318-333</pages><issue>201</issue><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Brada - 2008 - The CoSi Component Model Reviving the Black-Box Nature of Components.pdf</url></pdf-urls></urls><label>Czech Republic;Department of Computer Science and Engineering Uni;Europe;University</label><abstract>Many component models and frameworks have been created since the advent of component-based software engineering. While they all claim to follow fundamental component principles, the black-box na- ture in particular, a deeper look reveals surprising problems mainly in the component models built into the mainstream frameworks. In this paper we elaborate on these fundamental principles, analyse a selection of industrial and research component models in light of them, and propose a component model named CoSi. Its aim is to address the problems un- covered by the analysis while keeping the good aspects of current state state of the art models. It supports OSGi-style lightweight components with a rich set of features, and puts a strong emphasis on facilitating component comprehension and application consistency</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Choi, Yunja</author><author>Bunse, Christian</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Towards Component-Based Design and Verification of a μ-Controller</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Choi, Bunse - 2008 - Towards Component-Based Design and Verification of a μ-Controller.pdf</url></pdf-urls></urls><label>Asia;Europe;Germany;Korea;School of Electrical Engineering and Computer Scie;School of IT International University;University</label><abstract>Model-driven and component-based software development seems to be a promising approach to handling the complexity and at the same time increasing the quality of software systems. Although the idea of assembling systems from pre-fabricated components is appeal- ing, quality becomes a major issue, especially for embedded systems. Quality defects in one component might not affect the quality of the component but that of others. This paper presents an integrated, formal verification approach to ensure the correct behavior of embedded software components, as well as a case study that demonstrates its prac- tical applicability. The approach is based on the formalism of abstract components and their refinements, with its focus being on interaction behavior among components. The approach enables the identification of unanticipated design errors that are difficult to find and costly to correct using traditional verification methods such as testing and simulation</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Crnkovic, Ivica</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Introduction</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>127-133</pages><volume>2</volume><issue>4</issue><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><isbn>9783540878902</isbn><electronic-resource-num>10.1002/swf.45</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Crnkovic - 2008 - Component-based software engineering new challenges in software development.pdf</url></pdf-urls></urls></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Gama, Kiev</author><author>Donsez, Didier</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>A Practical Approach for Finding Stale References in a Dynamic Service Platform</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>246-261</pages><keywords><keyword>component validation</keyword><keyword>dynamic services</keyword><keyword>memory leaks</keyword><keyword>OSGi</keyword><keyword>runtime diagnostics</keyword><keyword>stale references</keyword></keywords><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Gama, Donsez - 2008 - A Practical Approach for Finding Stale References in a Dynamic Service Platform.pdf</url></pdf-urls></urls><label>ADELE team;Europe;France;LIG laboratory;University;University of Grenoble</label><abstract>The OSGi™ Service Platform is becoming the de facto standard for modularized Java applications. The market of OSGi based COTS components is continuously growing. OSGi specific problems make it harder to validate such components. The absence of separate object spaces to isolate components may lead to inconsistencies when they are stopped. The platform cannot ensure that objects from a stopped component will no longer be referenced by active code (a problem referred by OSGi specification as stale references) leading to memory retention and inconsistencies (e.g., utilization of invalid cached data) that can introduce faults in the system. This paper classifies different patterns of stale references detailing them and presents techniques based on Aspect Oriented Programming for runtime detec- tion of such problems. We also present a fail-stop mechanism on services to avoid propagation of incorrect results. These techniques have proven to be effective in a tool implementation that validated our study</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>George, Bart</author><author>Fleurquin, Regis</author><author>Sadou, Salah</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>A Component Selection Framework for COTS Libraries</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>286-301</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://George, Fleurquin, Sadou - 2008 - A Component Selection Framework for COTS Libraries.pdf</url></pdf-urls></urls><label>Europe;France;University;University of South Brittany;VALORIA Laboratory</label><abstract>Component-based software engineering proposes building complex applications from COTS (Commercial Off-The-Shelf) organized into component markets. Therefore, the main development effort is required in selection of the components that fit the specific needs of an application. In this article, we propose a mechanism allowing the automatic selection of a component among a set of candidate COTS, according to functional and non-functional properties. This mechanism has been val- idated on an example using the ComponentSource component market.</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Gjørven, Eli</author><author>Eliassen, Frank</author><author>Rouvoy, Romain</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Experiences from Developing a Component Technology Agnostic Adaptation Framework</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>230-245</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Gjørven, Eliassen, Rouvoy - 2008 - Experiences from Developing a Component Technology Agnostic Adaptation Framework.pdf</url></pdf-urls></urls><label>Dept. of Informatics;Europe;Institute;Norway;Simula Research Laboratory;University;University of Oslo</label><abstract>Systems are increasingly expected to adapt themselves to changing requirements and environmental situations with minimum user interactions. A challenge for self-adaptation is the increasing heterogeneity of applications and services, integrating multiple systems implemented in different platform and language technologies. In order to cope with this heterogeneity, self-adaptive systems need to support the integration of various technologies, allowing the target adaptive system to be built from subsystems realized with different implementa- tion technologies. In this paper, we argue that state-of-the adaptation frameworks do not lend themselves to ease technology integration and exploitation of ad- vanced features and opportunities offered by different implementation technologies. We present the QUA adaptation framework and its support for technology integration and exploitation. Unlike other adaptation frameworks the adaptation framework of QUA is able to exploit a wide range of adaptation mechanisms and technologies, without modification to the adaptation framework itself. As a demonstration of this property of QUA, we describe the integration of an ad- vanced component model technology, the FRACTAL component model, with the QUA framework. Our experience from this exercise shows that the QUA adapta- tion framework indeed allows integration of advanced implementation technolo- gies with moderate effort.</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Kotonya, Gerald</author><author>Lock, Simon</author><author>Mariani, John</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Opportunistic Reuse: Lessons from Scrapheap Software Development</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>302-309</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Kotonya, Lock, Mariani - 2008 - Opportunistic Reuse Lessons from Scrapheap Software Development.pdf</url></pdf-urls></urls><label>Computing Dept.;Europe;InfoLab 21;South Drive Lancaster University;United Kingdom;University</label><abstract>Many organizations use opportunistic reuse as a low-cost mechanism to improve the efficiency of development. Scrapheap reuse is a particular form of opportunistic development that we explore in this paper with the aid of an experimental study</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Koziolek, Heiko</author><author>Becker, Steffen</author><author>Happe, Jens</author><author>Reussner, Ralf</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Life-Cycle Aware Modelling of Software Components</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>278-285</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Koziolek et al. - 2008 - Life-Cycle Aware Modelling of Software Components.pdf</url></pdf-urls></urls><label>ABB Corporate Research;Chair for Software Design and Quality;Europe;FZI Forschungszentrum Informatik;Germany;Private Company;University;University of Karlsruhe</label><abstract>Current software component models insufficiently reflect the different stages of component life-cycle, which involves design, implementation, de- ployment, and runtime. Therefore, reasoning techniques for component-based models (e.g., protocol checking, QoS predictions, etc.) are often limited to a particular life-cycle stage. We propose modelling software components in different design stages, after implemenatation, and during deployment. Abstract models for newly designed components can be combined with refined models for already implemented components. As a proof-of-concept, we have implemented the new modelling techniques as part of our Palladio Component Model (PCM)</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Kuperberg, Michael</author><author>Krogmann, Klaus</author><author>Reussner, Ralf</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Performance Prediction for Black-Box Components Using Reengineered Parametric Behaviour Models</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>48-63</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Kuperberg, Krogmann, Reussner - 2008 - Performance Prediction for Black-Box Components Using Reengineered Parametric Behaviour Models.pdf</url></pdf-urls></urls><label>Chair for Software Design and Quality;Europe;Germany;University;University of Karlsruhe</label><abstract>In component-based software engineering, the response time of an entire application is often predicted from the execution durations of individual component services. However, these execution durations are specific for an exe- cution platform (i.e. its resources such as CPU) and for a usage profile. Reusing an existing component on different execution platforms up to now required re- peated measurements of the concerned components for each relevant combina- tion of execution platform and usage profile, leading to high effort. This paper presents a novel integrated approach that overcomes these limitations by recon- structing behaviour modelswith platform-independent resource demands of byte- code components. The reconstructed models are parameterised over input parameter values. Using platform-specific results of bytecode benchmarking, our approach is able to translate the platform-independent resource demands into pre- dictions for execution durations on a certain platform. We validate our approach by predicting the performance of a file sharing application</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Lumpe, Markus</author><author>Grunske, Lars</author><author>Schneider, Jean-guy</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>State Space Reduction Techniques for Component Interfaces</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>130-145</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Lumpe, Grunske, Schneider - 2008 - State Space Reduction Techniques for Component Interfaces.pdf</url></pdf-urls></urls><label>Australia;Faculty of Information &amp; Communication Technologie;University</label><abstract>Automata-based interface and protocol specifications provide an elegant framework to capture and automatically verify the interactive behavior of component-based software systems. Unfortunately, the underlying formalisms suffer from combinatorial state explosion when constructing new specifications for composite components or systems andmay therefore render the application of these techniques impractical for real-world applications. In this paper, we explore the bisimulation technique as a means for a mechanical state space reduction of component-based systems. In particular, we apply both strong and weak bisimu- lation to Component Interaction Automata in order to obtain a minimal automata that can serve as a behavioral equivalent abstraction for a given component spec- ification and illustrate that the proposed approach can significantly reduce the complexity of an interface specification after composition</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Martens, Anne</author><author>Becker, Steffen</author><author>Koziolek, Heiko</author><author>Reussner, Ralf</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>An Empirical Investigation of the Effort of Creating Reusable , Component-Based Models for Performance Prediction</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>16-31</pages><keywords><keyword>controlled experiment</keyword><keyword>empirical study</keyword><keyword>performance prediction</keyword></keywords><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Martens et al. - 2008 - An Empirical Investigation of the Effort of Creating Reusable , Component-Based Models for Performance Prediction.pdf</url></pdf-urls></urls><label>ABB Corporate Research;Am Fasanengarten 5;Chair for Software Design and Quality;Europe;FZI Forschungszentrum Informatik;Germany;Insitute;Private Company;University;University of Karlsruhe</label><abstract>Model-based performance prediction methods aim at evaluating the expected response time, throughput, and resource utilisation of a software system at design time, before implementation. Existing performance prediction methods usemonolithic, throw-away predictionmodels or component-based, reusable pre- dictionmodels.While it is intuitively clear that the development of reusablemod- els requiresmore effort, the actual higher amount of effort has not been quantified or analysed systematically yet. To study the effort, we conducted a controlled experiment with 19 computer science students who predicted the performance of two example systems applying an established, monolithic method (Software Performance Engineering) as well as our own component-based method (Palladio). The results show that the effort of model creation with Palladio is approximately 1.25 times higher than with SPE in our experimental setting, with the resulting models having comparable prediction accuracy. Therefore, in some cases, the cre- ation of reusable prediction models can already be justified, if they are reused at least once</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Martínez, Patricia López</author><author>Drake, José M</author><author>Pacheco, Pablo</author><author>Medina, Julio L</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Ada-CCM : Component-Based Technology for Distributed Real-Time Systems</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>334-350</pages><volume>034026</volume><keywords><keyword>Ada 2005</keyword><keyword>Component-based</keyword><keyword>embedded systems</keyword><keyword>OMG</keyword><keyword>real-time</keyword></keywords><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Martínez et al. - 2008 - Ada-CCM Component-Based Technology for Distributed Real-Time Systems.pdf</url></pdf-urls></urls><label>Departamento de Electrónica y Computadores;Europe;Spain;Universidad de Cantabria;University</label><abstract>This paper proposes a technology for the development of distributed real-time component-based applications, which takes advantage of the features that Ada offers for the development of applications with predictable temporal behaviour, and which can be executed in embedded platforms with limited re- sources. The technology uses the Deployment and Configuration of Component based Distributed Applications Specification of the OMG for describing the components, the execution platforms and the applications. The framework defined in the Lightweight CCM standard of the OMG is taken as the basis of the internal architecture of the components and the applications. It has been extended with a number of features to make the temporal behaviour of the appli- cations predictable. Among these extensions, the usage of CORBA has been re- placed by special distributed components, called connectors, which implement the interaction between components by means of predictable and customizable communication services. Besides, special mechanisms have been introduced in the environment to make the threading characteristics of the components config- urable. The technology fixes the responsibilities and the knowledge required by each actor involved in the component-based development process, and for each of them it defines the input and output artifacts that they have to manage</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Parrend, Pierre</author><author>Frenot, Stephane</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Classification of Component Vulnerabilities in Java Service Oriented Programming ( SOP ) Platforms</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>80-96</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Parrend, Frenot - 2008 - Classification of Component Vulnerabilities in Java Service Oriented Programming ( SOP ) Platforms.pdf</url></pdf-urls></urls><label>Europe;France;INRIA Amazones / CITI;INSA-Lyon;University</label><abstract>Java-based systems have evolved from stand-alone appli- cations to multi-component to Service Oriented Programming (SOP) platforms. Each step of this evolution makes a set of Java vulnerabil- ities directly exploitable by malicious code: access to classes in multi- component platforms, and access to object in SOP, is granted to them with often no control. This paper defines two taxonomies that characterize vulnerabilities in Java components: the vulnerability categories, and the goals of the attacks that are based on these vulnerabilities. The ‘vulnerability cat- egory’ taxonomy is based on three application types: stand-alone, class sharing, and SOP. Entries express the absence of proper security features at places they are required to build secure component-based systems. The ‘goal’ taxonomy is based on the distinction between undue access, which encompasses the traditional integrity and confidentiality security properties, and denial-of-service. It provides a matching between the vul- nerability categories and their consequences. The exploitability of each vulnerability is validated through the development of a pair of malicious and vulnerable components. Experiments are conducted in the context of the OSGi Platform. Based on the vulnerability taxonomies, recom- mendations for writing hardened component code are issued</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Russello, Giovanni</author><author>Mostarda, Leonardo</author><author>Dulay, Naranker</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>ESCAPE : A Component-Based Policy Framework for Sense and React Applications</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>212-229</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Russello, Mostarda, Dulay - 2008 - ESCAPE A Component-Based Policy Framework for Sense and React Applications.pdf</url></pdf-urls></urls><label>Europe;Imperial College London;United Kingdom;University</label><abstract>Sense-and-react applications are characterised by the fact that actuators are able to react to data collected by sensors and change the monitored environment. With the introduction of nodes sporting actuators, Wireless Sensor Networks (WSNs) are being used for realising such applications. Sensor and actuator nodes are capable of interact locally. As a result, the logic that coordinates the activities of the different nodes towards a common goals has to be embedded in the network itself. In this scenario, the development of applications becomes more complex. In this paper, we present a component-based framework that facili tates the development of sense and react applications promoting reuse of code. While applications components are used to implement basic functionalities (sense and reaction) our framework allows the specifica- tion of application-domain requirements. Our framework is composed of a Publish/Subscribe Broker, a component-based service layer and a Policy Manager. The broker manages subscriptions information and the service layer provides mechanisms orthogonal to publish/subscribe core (e.g., diffusion protocols, data communication protocols, data encryp- tion, etc.). The novelty of our approach is the introduction of the Policy Manager where policies are enforced. Policies are rules that govern the choices and behaviour of the system. They can be used for specifying which services have to be associated with the broker operations. More-over, policies can embed rules for coordinating the activities of the differ- ent sensors and actuators for reaching the common goals of applications.</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Sentilles, Severine</author><author>Vulgarakis, Aneta</author><author>Bures, Tomas</author><author>Carlson, Jan</author><author>Crnkovic, Ivica</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>A Component Model for Control-Intensive Embedded Systems</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>310-317</pages><issue>ii</issue><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Sentilles et al. - 2008 - A Component Model for Control-Intensive Embedded Systems.pdf</url></pdf-urls></urls><label>Europe;Malardalen University;Sweden;University;Vasteras</label><abstract>In this paper we focus on design of a class of distributed embedded systems that primarily perform real-time controlling tasks. We propose a two-layer componentmodel for design and development of such embedded systems with the aim of using component-based development for decreasing the complexity in design and providing a ground for ana- lyzing them and predict their properties, such as resource consumption and timing behavior. The two-layer model is used to efficiently cope with different design paradigms on different abstraction levels. The model is illustrated by an example from the vehicular domain.</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Seo, Chiyoung</author><author>Malek, Sam</author><author>Medvidovic, Nenad</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Component-Level Energy Consumption Estimation for Distributed Java-Based Software Systems</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>97-113</pages><keywords><keyword>component-based software</keyword><keyword>Distributed systems</keyword><keyword>energy consumption</keyword><keyword>Java</keyword></keywords><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Seo, Malek, Medvidovic - 2008 - Component-Level Energy Consumption Estimation for Distributed Java-Based Software Systems.pdf</url></pdf-urls></urls><label>Computer Science Department;Department of Computer Science;George Mason University;North America;USA;University;University of Southern California</label><abstract>Efficiency with respect to energy consumption has increasingly been recognized as an important quality attribute for distributed software systems in embedded and pervasive environments. In this paper we present a framework for estimating the energy consumption of distributed software systems imple- mented in Java. Our primary objective in devising the framework is to enable an engineer to make informed decisions when adapting a system’s architecture, such that the energy consumption on hardware devices with a finite battery life is reduced, and the lifetime of the system’s key software services increases. Our framework explicitly takes a component-based perspective, which renders it well suited for a large class of today’s distributed, embedded, and pervasive ap- plications. The framework allows the engineer to estimate the distributed sys- tem’s energy consumption at system construction-time and refine it at runtime. In a large number of distributed application scenarios, the framework showed very good precision on the whole, giving results that were within 5% (and often less) of the actual energy consumption incurred by executing the software. Our work to date has also highlighted the framework’s practical applications and a number of possible enhancements</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Sharma, Vibhu Saujanya</author><author>Jalote, Pankaj</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Deploying Software Components for Performance</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>32-47</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Sharma, Jalote - 2008 - Deploying Software Components for Performance.pdf</url></pdf-urls></urls><label>Accenture Technology Labs India;Asia;Dept. of Computer Science and Engineering;IBC Knowledge Park;India;Indian Institute of Technology Delhi;Institute;Private Company;University</label><abstract>Performance is a critical attribute of software systems and depends heavily on the software architecture. Though the impact of the component and connector architecture on performance is well appreci- ated and modeled, the impact of component deployment has not been studied much. For a given component and connector architecture, the system performance is also affected by how components are deployed onto hardware resources. In this work we first formulate this problem of finding the deployment that maximizes performance, and then present a heuristic-based solution approach for it. Our approach incorporates the software architecture, component resource requirements, and the hard- ware specifications of the system. We break the problem into two sub- problems and formulate heuristics for suggesting the best deployment in terms of performance. Our evaluation indicates that the proposed heuris- tic performs very well and outputs a deployment that is the best or close to the best, in more than 96% cases.</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Sun, Lianshan</author><author>Huang, Gang</author><author>Mei, Hong</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Validating Access Control Configurations in J2EE Applications</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>64-79</pages><keywords><keyword>Access Control</keyword><keyword>J2EE Security</keyword><keyword>Validation.</keyword></keywords><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Sun, Huang, Mei - 2008 - Validating Access Control Configurations in J2EE Applications.pdf</url></pdf-urls></urls><label>Asia;China;Key Laboratory of High Confidence Software Technol;Ministry of Education;Peking University;School of Electronics Engineering and Computer Sci;University</label><abstract>Access control is a means to achieve information security. When we build large-scale systems based on commercial component middleware plat- forms, such as those compliant to J2EE, a usual way to enforce access control is to define Access Control Configurations (ACCs) for components in a declara- tive manner. These ACCs can be enforced by the J2EE security service to grant or deny access requests to components. However, it is difficult for the develop- ers to define correct ACCs according to complex and sometimes ambiguous real-world access control requirements. Faults of ACCs in large-scale J2EE ap- plications may inevitably occur due to various reasons, for example ad hoc mis- takes of the developers. This paper identifies three kinds of faults specific to ACCs of J2EE applications as incompleteness, inconsistency, and redundancy, presents validation algorithms for identifying these faults according to access control requirements, illustrates these faults and the validation algorithms with an online bank application</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Sundmark, Daniel</author><author>Carlson, Jan</author><author>Punnekkat, Sasikumar</author><author>Ermedahl, Andreas</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Structural Testing of Component-Based Systems</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>180-195</pages><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Sundmark et al. - 2008 - Structural Testing of Component-Based Systems.pdf</url></pdf-urls></urls><label>Europe;MRTC;Malardalen University;Sweden;University</label><abstract>Component based development of software systems needs to devise effective test management strategies in order fully achieve its perceived advantages of cost efficiency, flexibility, and quality in indus- trial contexts. In industrial systems with quality demands, while testing software, measures are employed to evaluate the thoroughness achieved by execution of a certain set of test cases. Typically, these measures are expressed in the form of coverage of different structural test crite- ria, e.g., statement coverage. However, such measures are traditionally applicable only on the lowest level of software integration (i.e., the com- ponent level). As components are assembled into subsystems and further into full systems, general measures of test thoroughness are no longer available. In this context, we formalize the added test effort and show to what extent the coverage of structural test criteria are maintained when components are integrated, in three representative component models. This enables focusing on testing the right aspects of the software at the right level of integration, and achieves cost reduction during testing — one of the most resource-consuming activities in software engineering.</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Tolosana-Calasanz, Rafael</author><author>F. Rana, Omer</author><author>A. Banares, Jose</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Automating Performance Analysis from Taverna Workflows</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>1-15</pages><keywords><keyword>Petri Nets</keyword><keyword>Workflow Performance Models</keyword></keywords><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Tolosana-Calasanz, F. Rana, A. Banares - 2008 - Automating Performance Analysis from Taverna Workflows.pdf</url></pdf-urls></urls><label>Cardiff University;Department of Computer Science and Systems Enginee;Europe;Institute;Instituto de Investigacion en Ingenierıa de Aragon;School of Computer Science;Spain;United Kingdom;University</label><abstract>Workflow systems provide support for combining compo- nents to achieve a particular outcome. Various approaches from software engineering have been utilized within such systems, such as the use of design patterns to support composition, and the use of a software en- gineering lifecycle to support workflow construction and execution. As components used within a workflow may be implemented by third par- ties, it is often necessary to be able to determine the impact a particular component composition will have on the overall execution of a workflow. A method for predicting the execution time of a given workflow is proposed. First, the method obtains a model from a given workflow in an automated way. The model obtained is a Reference net – a specific type of Petri net. Features of Reference nets can subsequently be exploited, such as the possibility of building hierarchical workflow models which can facilitate the modelling process. The Reference nets are extended so that each task in the model is parameterised with a time value, representing the execution time of the task.We propose several timing profiles: those obtained from real measurement of the workflow system, from stochastic and constant values which allow us to test the model behaviour under specific situations</abstract></record><record><database name="2008.enl" path="2008.enl">2008.enl</database><ref-type name="Conference Proceedings">10</ref-type><contributors><authors><author>Varekova, Pavlina</author><author>Cerna, Ivana</author></authors><secondary-authors><author>Michel R.V. Chaudron, Clemens Szyperski and Ralf Reussner</author></secondary-authors></contributors><titles><title>Model Checking of Control-User Component-Based Parametrised Systems</title><secondary-title>Component-Based Software Engineering 11th International Symposium, CBSE</secondary-title></titles><periodical><full-title>Component-Based Software Engineering 11th International Symposium, CBSE</full-title></periodical><pages>146-162</pages><issue>1</issue><keywords/><dates><year>2008</year></dates><pub-location>Karlsruhe, Germany</pub-location><urls><pdf-urls><url>internal-pdf://Varekova, Cerna - 2008 - Model Checking of Control-User Component-Based Parametrised Systems.pdf</url></pdf-urls></urls><label>Europe;Faculty of Informatics;Masaryk University Czech Republic;University</label><abstract>Many real component-based systems, so called Control-User systems, are composed of a stable part (control component) and a num- ber of dynamic components of the same type (user components). Models of these systems are parametrised by the number of user components and thus potentially infinite.Model checking techniques can be used to verify only specific instances of the systems. This paper presents an algorithmic technique for verification of safety interaction properties of Control-User systems. The core of our verification method is a computation of a cutoff. If the system is proved to be correct for every number of user compo- nents lower than the cutoff then it is correct for any number of users.We present an on-the-fly model checking algorithm which integrates compu- tation of a cutoff with the verification itself. Symmetry reduction can be applied during the verification to tackle the state explosion of the model. Applying the algorithm we verify models of several previously published component-based systems</abstract></record></records></xml>
